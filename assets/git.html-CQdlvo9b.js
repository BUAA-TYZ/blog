import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,d as s,o as l}from"./app-GvbLqAZr.js";const a="/blog/assets/posts/git-Refs/1.png",o="/blog/assets/posts/git-Refs/2.png",n="/blog/assets/posts/git-Refs/3.png",r="/blog/assets/posts/git-Refs/4.png",c="/blog/assets/posts/git-Refs/5.png",g="/blog/assets/posts/git-Refs/6.png",d="/blog/assets/posts/git-Refs/7.png",p="/blog/assets/posts/git-Refs/8.png",h="/blog/assets/posts/git-Refs/9.png",m="/blog/assets/posts/git-Refs/10.png",u="/blog/assets/posts/git-Refs/11.png",b="/blog/assets/posts/git-Refs/12.png",f="/blog/assets/posts/git-Refs/13.png",k="/blog/assets/posts/git-Refs/14.png",v="/blog/assets/posts/git-Refs/15.png",y="/blog/assets/posts/git-Refs/16.png",A="/blog/assets/posts/git-Refs/17.png",B="/blog/assets/posts/git-Refs/18.png",_="/blog/assets/posts/git-Refs/19.png",x="/blog/assets/posts/git-Refs/20.png",R="/blog/assets/posts/git-Refs/21.png",F="/blog/assets/posts/git-Refs/22.png",z={};function C(G,i){return l(),t("div",null,i[0]||(i[0]=[s(`<h1 id="progit" tabindex="-1"><a class="header-anchor" href="#progit"><span>ProGit</span></a></h1><p><a href="https://bingohuang.gitbooks.io/progit2/content/" target="_blank" rel="noopener noreferrer">Progit here</a></p><h3 id="git-基础" tabindex="-1"><a class="header-anchor" href="#git-基础"><span>Git 基础</span></a></h3><h4 id="一些命令" tabindex="-1"><a class="header-anchor" href="#一些命令"><span>一些命令</span></a></h4><ul><li><code>git add</code> 跟踪新文件 <ul><li>这是个多功能命令：可以用它开始跟踪新文件，或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等</li></ul></li><li><code>git commit</code> 提交文件 <ul><li><code>--amend</code> 如果一次提交忘记提交某个文件，通过此选项补交进上一次的提交；加 <code>-m</code> 可以更改上一次提交的 description</li></ul></li><li><code>git diff</code></li><li><code>git mv</code></li><li><code>git rm</code><ul><li><code>--cached</code> 只删除 git 追踪</li></ul></li><li><code>git status</code></li><li><code>git log</code><ul><li><code>-p</code> 显示每次提交的差异</li><li><code>-2</code> 显示最近的两次提交</li></ul></li><li><code>git reset</code><ul><li><code>HEAD &lt;file&gt;</code> 取消暂存</li></ul></li><li><code>git restore</code><ul><li><code>--staged</code> 仅取消暂存（不改动工作区）</li></ul></li></ul><h4 id="分支命令" tabindex="-1"><a class="header-anchor" href="#分支命令"><span>分支命令</span></a></h4><ul><li><p><code>git branch</code>：显示所有分支</p><ul><li><code>&lt;branch name&gt;</code> 创建分支</li><li><code>-d &lt;branch name&gt;</code> 删除一个分支</li><li><code>-u &lt;remote&gt;/&lt;branch&gt;</code> 跟踪一个远程分支</li></ul></li><li><p><code>git checkout</code></p><ul><li><code>-b &lt;branch name&gt;</code> 等价于 <code>git br &lt;branch name&gt; git checkout &lt;branch name&gt;</code></li><li><code>-b &lt;branch&gt; &lt;remote&gt;/&lt;branch&gt;</code> 创建指定起点的新分支并从其开始工作</li><li><code>&lt;branch name&gt;</code> 切换 HEAD 至新分支</li><li>⚠️ <code>-- &lt;file&gt;</code> 被 <code>git restore</code> 替代，为了避免 checkout 语义的混乱，用于丢弃工作区的改动</li></ul></li><li><p><code>git rebase</code> 变基</p><ul><li><code>&lt;branch&gt;</code>：将当前分支续到 branch 后</li><li><code>&lt;a-br&gt; &lt;b-br&gt;</code>：将 b-br 续到 a-br 后</li></ul></li></ul><h4 id="gitignore" tabindex="-1"><a class="header-anchor" href="#gitignore"><span>gitignore</span></a></h4><ul><li><p><strong>.gitignore</strong></p><ul><li><p>规范</p><ul><li>所有空行或者以 ＃ 开头的行都会被 Git 忽略</li><li>可以使用标准的 glob 模式（简化正则）匹配</li><li>匹配模式可以以（/）开头防止递归</li><li>匹配模式可以以（/）结尾指定目录</li><li>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反</li></ul></li><li><p><code>*</code> 匹配多个字符 <code>**</code> 匹配任意中间目录</p></li><li><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span># no .a files</span></span>
<span class="line"><span>*.a</span></span>
<span class="line"><span># but do track lib.a, even though you&#39;re ignoring .a files above</span></span>
<span class="line"><span>!lib.a</span></span>
<span class="line"><span># only ignore the TODO file in the current directory, not subdir/TODO</span></span>
<span class="line"><span>/TODO</span></span>
<span class="line"><span># ignore all files in the build/ directory</span></span>
<span class="line"><span>build/</span></span>
<span class="line"><span># ignore doc/notes.txt, but not doc/server/arch.txt</span></span>
<span class="line"><span>doc/*.txt</span></span>
<span class="line"><span># ignore all .pdf files in the doc/ directory</span></span>
<span class="line"><span>doc/**/*.pdf</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h4 id="远程仓库命令" tabindex="-1"><a class="header-anchor" href="#远程仓库命令"><span>远程仓库命令</span></a></h4><ul><li><code>git remote</code><ul><li><code>-v</code></li><li><code>&lt;shortname&gt; &lt;url&gt;</code> 添加远程仓库</li></ul></li><li><code>git fetch</code> 从远程仓库拉取</li><li><code>git push</code> 推送 <ul><li><code>&lt;remote-name&gt; &lt;branch-name&gt;</code></li><li><code>&lt;remote&gt; &lt;a-branch&gt;[:&lt;b-branch&gt;]</code>：向 remote 端推送本地的 a-branch 到远程的 b-branch（省略则推送到同名分支）</li><li><code>&lt;remote&gt; --delete &lt;branch&gt;</code>：删除远程分支</li></ul></li></ul><h4 id="打标签" tabindex="-1"><a class="header-anchor" href="#打标签"><span>打标签</span></a></h4><ul><li><code>git tag</code></li></ul><h4 id="git-别名" tabindex="-1"><a class="header-anchor" href="#git-别名"><span>Git 别名</span></a></h4><ul><li>见 <a href="https://github.com/BUAA-TYZ/TYZ_Configs/tree/main" target="_blank" rel="noopener noreferrer">here</a></li></ul><h3 id="git-分支" tabindex="-1"><a class="header-anchor" href="#git-分支"><span>Git 分支</span></a></h3><h4 id="分支简介" tabindex="-1"><a class="header-anchor" href="#分支简介"><span>分支简介</span></a></h4><figure><img src="`+a+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>一次提交是一个指针，指向这次提交的结构<br><img src="'+o+'" alt="" loading="lazy"></li><li>一个分支就是一个指向提交的指针</li></ul><h4 id="一个例子" tabindex="-1"><a class="header-anchor" href="#一个例子"><span>一个例子</span></a></h4><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><p>我们要将几个分支融合</p><ol><li><code>git checkout master</code></li><li><code>git merge hotfix</code></li></ol></li></ul><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><p>因为只有单一历史线，所以 <code>master</code> 分支直接快进</p><ol><li><code>git branch -d hotfix</code></li><li><code>git checkout iss53</code></li><li><code>git commit ...</code></li></ol></li></ul><figure><img src="'+c+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li><code>git checkout master</code></li><li><code>git merge iss53</code></li></ol><ul><li><p>在这里，系统会根据 两个分支的共同祖先 <code>C2</code> 以及 <code>C4</code> <code>C5</code> 进行 merge</p></li><li><p>如果遇到分支冲突，git 会暂停等待我们解决冲突</p><ul><li><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> HEAD:index.html</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;footer&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;contact : email.support@github.com&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=======</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;footer&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> please contact us at support@github.com</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&gt;&gt;&gt;&gt;&gt;&gt; iss53:index.html</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">======= 将两个分支分成上下两部分</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>选择其中之一，然后将剩余的部分删除掉后 <code>git add</code> 即视为解决冲突</p></li></ul></li></ul><h4 id="分支开发工作流" tabindex="-1"><a class="header-anchor" href="#分支开发工作流"><span>分支开发工作流</span></a></h4><h5 id="长期分支" tabindex="-1"><a class="header-anchor" href="#长期分支"><span>长期分支</span></a></h5><ul><li>一种常见的开发方式：在 <code>master</code> 分支上保留稳定的代码，用 <code>develop</code> 等分支进行后续开发，等到达到稳定，合入 <code>master</code></li></ul><h5 id="特性分支" tabindex="-1"><a class="header-anchor" href="#特性分支"><span>特性分支</span></a></h5><ul><li>一种短期分支，被用来实现单一特性</li></ul><h4 id="远程分支" tabindex="-1"><a class="header-anchor" href="#远程分支"><span>远程分支</span></a></h4><ul><li>远程分支以 <code>&lt;remmote&gt;/&lt;branch&gt;</code> 命名<br><img src="`+g+'" alt="" loading="lazy"></li><li>本地和远程被提交了几次<br><img src="'+d+'" alt="" loading="lazy"></li><li>执行 <code>git fetch origin</code><br><img src="'+p+'" alt="" loading="lazy"></li><li><code>git remote add teamone ...</code> &amp;&amp; <code>git fetch teamone</code><br><img src="'+h+'" alt="" loading="lazy"></li></ul><h5 id="跟踪分支" tabindex="-1"><a class="header-anchor" href="#跟踪分支"><span>跟踪分支</span></a></h5><ul><li>通常克隆下来后会自动创建一个跟踪 origin/master 的本地 master 分支</li><li>从一个远程分支 checkout 也会自动进行跟踪</li><li>通过 <code>-u</code> 设置跟踪</li></ul><h4 id="变基" tabindex="-1"><a class="header-anchor" href="#变基"><span>变基</span></a></h4><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><p>experiment 原本指向 C4</p><ol><li><p><code>git checkout experiment</code></p></li><li><p><code>git rebase master</code></p></li></ol></li><li><p>原理：将当前分支 C4 对共同祖先 C2 的修改提取为临时文件，指向要变基的 branch C3，应用临时文件</p></li><li><p>随后进行整合</p><ol><li><code>git checkout master</code></li><li><code>git merge experiment</code></li></ol></li><li><p>变基使提交历史变得线性</p><ul><li>例如：向某个开源项目贡献代码，先在自己的分支开发，开发完成后需要将代码变基到 origin/master 上（<code>git checkout master git pull git checkout &lt;branch&gt; git rebase master</code>）再提交修改</li></ul></li></ul><h5 id="一个更复杂的变基例子" tabindex="-1"><a class="header-anchor" href="#一个更复杂的变基例子"><span>一个更复杂的变基例子</span></a></h5><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><code>git rebase --onto master server server client</code>：取出 client，找出处于 server 和 client 共同祖先 C3 之后的修改（C8 C9）续到 master 后<br><img src="'+b+'" alt="" loading="lazy"></li><li><code>git checkout master git merge client</code> &amp;&amp; <code>git rebase master server</code><br><img src="'+f+'" alt="" loading="lazy"></li></ul><h5 id="变基的风险" tabindex="-1"><a class="header-anchor" href="#变基的风险"><span>变基的风险</span></a></h5><ul><li>⚠️ <strong>不要对你的仓库外有副本的分支执行变基</strong></li><li>变基本质上是丢弃了一个 commit 将其续到另一个 commit 之后，如果你对远程仓库的分支进行变基后推送就会导致别人拉取的分支出现问题（他早在之前就拉取了分支，随后你变基导致他拉取的某些提交应该是不存在的）</li><li>总的来说，将变基视为整合自己<strong>独立</strong>开发分支历史的一种手段是安全的</li></ul><h3 id="分布式-git" tabindex="-1"><a class="header-anchor" href="#分布式-git"><span>分布式 Git</span></a></h3><h4 id="分布式工作流程" tabindex="-1"><a class="header-anchor" href="#分布式工作流程"><span>分布式工作流程</span></a></h4><ul><li>集中式工作流：<br><img src="'+k+'" alt="" loading="lazy"><ul><li>一个仓库，若干个开发者向其推送修改</li><li>若两个人前后推送同一分支，只有第一个能成功，第二个会被拒绝，通知其需要先合并第一个的修改</li></ul></li><li>集成管理者工作流（Github）：<br><img src="'+v+'" alt="" loading="lazy"><ul><li>项目维护者推送到主仓库</li><li>贡献者 clone 修改 推送到自己的仓库</li><li>贡献者 pull request</li><li>维护者同意修改</li></ul></li></ul><h4 id="向一个项目贡献" tabindex="-1"><a class="header-anchor" href="#向一个项目贡献"><span>向一个项目贡献</span></a></h4><h5 id="私人小型团队" tabindex="-1"><a class="header-anchor" href="#私人小型团队"><span>私人小型团队</span></a></h5><ul><li><code>A: git clone john@githost:simplegit.git 修改后提交</code></li><li><code>B: git clone jessica@githost:simplegit.git 修改后提交并 git push origin master</code></li><li>A 无法推送 <ul><li><code> git fetch origin &amp;&amp; git merge origin/master</code> or <code>git pull</code><br><img src="'+y+'" alt="" loading="lazy"></li></ul></li><li>现在 A 进行了推送，origin/master 指向 72bbc</li><li>B 在此期间在一个特性分支上工作，并做了三次提交，且未抓取远程仓库<br><img src="'+A+'" alt="" loading="lazy"></li><li><code>B: git fetch origin</code><br><img src="'+B+'" alt="" loading="lazy"><ul><li>B 的本地历史如图</li><li>master 合并两个分支 <ol><li><code>git checkout master</code></li><li><code>git merge issue54</code> 发生一次 fast-forward</li><li><code>git merge origin/master</code><br><img src="'+_+'" alt="" loading="lazy"></li></ol></li></ul></li><li>此时便可以进行推送了</li></ul><h5 id="私人管理团队" tabindex="-1"><a class="header-anchor" href="#私人管理团队"><span>私人管理团队</span></a></h5><ul><li>没有 master 分支的更新权限</li><li>A 与 B 和 C 分别在不同的两个特性分支上进行工作</li><li>A 在 FeatureA 上工作 <code>git checkout -b featureA &amp;&amp; git commit ... &amp;&amp; git push -u origin featureA</code><ul><li>A 发邮件给 B 通知自己进行了一些修改</li></ul></li><li>同时他进行 FeatureB 的工作 <code>git fetch origin &amp;&amp; git checkout -b featureB origin/featureB &amp;&amp; git commit ...</code><br><img src="'+x+'" alt="" loading="lazy"><ul><li>A 准备提交时被C告知，C已经进行了一些提交，需要合并 origin/featureBee</li><li><code>git fetch origin &amp;&amp; git merge origin/featureBee</code></li><li><code>git push -u origin featureB:featureBee</code></li></ul></li><li>A 又被告知 B 已经推送了一些新东西在 featureA <ul><li><code>git fetch origin &amp;&amp; git checkout featureA &amp;&amp; git merge origin/featureA</code> （一次 fast-forward）</li><li>A 再次进行了一些提交...<br><img src="'+R+'" alt="" loading="lazy"></li></ul></li><li>整合者合并入 master 分支<br><img src="'+F+'" alt="" loading="lazy"></li></ul>',52)]))}const P=e(z,[["render",C],["__file","git.html.vue"]]),D=JSON.parse('{"path":"/posts/backend/tools/git.html","title":"ProGit","lang":"zh-CN","frontmatter":{"date":"2025-01-04T00:00:00.000Z","category":["工具链"],"tag":["git"],"footer":"凉了的馒头","description":"ProGit Progit here Git 基础 一些命令 git add 跟踪新文件 这是个多功能命令：可以用它开始跟踪新文件，或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等 git commit 提交文件 --amend 如果一次提交忘记提交某个文件，通过此选项补交进上一次的提交；加 -m 可以更改上一次提交的 de...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/backend/tools/git.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"ProGit"}],["meta",{"property":"og:description","content":"ProGit Progit here Git 基础 一些命令 git add 跟踪新文件 这是个多功能命令：可以用它开始跟踪新文件，或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等 git commit 提交文件 --amend 如果一次提交忘记提交某个文件，通过此选项补交进上一次的提交；加 -m 可以更改上一次提交的 de..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/blog/assets/posts/git-Refs/1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-28T02:00:41.000Z"}],["meta",{"property":"article:tag","content":"git"}],["meta",{"property":"article:published_time","content":"2025-01-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-28T02:00:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ProGit\\",\\"image\\":[\\"https://mister-hope.github.io/blog/assets/posts/git-Refs/1.png\\",\\"https://mister-hope.github.io/blog/assets/posts/git-Refs/2.png\\",\\"https://mister-hope.github.io/blog/assets/posts/git-Refs/3.png\\",\\"https://mister-hope.github.io/blog/assets/posts/git-Refs/4.png\\",\\"https://mister-hope.github.io/blog/assets/posts/git-Refs/5.png\\",\\"https://mister-hope.github.io/blog/assets/posts/git-Refs/6.png\\",\\"https://mister-hope.github.io/blog/assets/posts/git-Refs/7.png\\",\\"https://mister-hope.github.io/blog/assets/posts/git-Refs/8.png\\",\\"https://mister-hope.github.io/blog/assets/posts/git-Refs/9.png\\",\\"https://mister-hope.github.io/blog/assets/posts/git-Refs/10.png\\",\\"https://mister-hope.github.io/blog/assets/posts/git-Refs/11.png\\",\\"https://mister-hope.github.io/blog/assets/posts/git-Refs/12.png\\",\\"https://mister-hope.github.io/blog/assets/posts/git-Refs/13.png\\",\\"https://mister-hope.github.io/blog/assets/posts/git-Refs/14.png\\",\\"https://mister-hope.github.io/blog/assets/posts/git-Refs/15.png\\",\\"https://mister-hope.github.io/blog/assets/posts/git-Refs/16.png\\",\\"https://mister-hope.github.io/blog/assets/posts/git-Refs/17.png\\",\\"https://mister-hope.github.io/blog/assets/posts/git-Refs/18.png\\",\\"https://mister-hope.github.io/blog/assets/posts/git-Refs/19.png\\",\\"https://mister-hope.github.io/blog/assets/posts/git-Refs/20.png\\",\\"https://mister-hope.github.io/blog/assets/posts/git-Refs/21.png\\",\\"https://mister-hope.github.io/blog/assets/posts/git-Refs/22.png\\"],\\"datePublished\\":\\"2025-01-04T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-28T02:00:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Tyz\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":3,"title":"Git 基础","slug":"git-基础","link":"#git-基础","children":[]},{"level":3,"title":"Git 分支","slug":"git-分支","link":"#git-分支","children":[]},{"level":3,"title":"分布式 Git","slug":"分布式-git","link":"#分布式-git","children":[]}],"git":{"createdTime":1736478285000,"updatedTime":1740708041000,"contributors":[{"name":"BUAA-TYZ","username":"BUAA-TYZ","email":"2506741037@qq.com","commits":2,"url":"https://github.com/BUAA-TYZ"}]},"readingTime":{"minutes":5.88,"words":1763},"filePathRelative":"posts/backend/tools/git.md","localizedDate":"2025年1月4日","excerpt":"\\n<p><a href=\\"https://bingohuang.gitbooks.io/progit2/content/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Progit here</a></p>\\n<h3>Git 基础</h3>\\n<h4>一些命令</h4>\\n<ul>\\n<li><code>git add</code> 跟踪新文件\\n<ul>\\n<li>这是个多功能命令：可以用它开始跟踪新文件，或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等</li>\\n</ul>\\n</li>\\n<li><code>git commit</code> 提交文件\\n<ul>\\n<li><code>--amend</code> 如果一次提交忘记提交某个文件，通过此选项补交进上一次的提交；加 <code>-m</code> 可以更改上一次提交的 description</li>\\n</ul>\\n</li>\\n<li><code>git diff</code></li>\\n<li><code>git mv</code></li>\\n<li><code>git rm</code>\\n<ul>\\n<li><code>--cached</code> 只删除 git 追踪</li>\\n</ul>\\n</li>\\n<li><code>git status</code></li>\\n<li><code>git log</code>\\n<ul>\\n<li><code>-p</code> 显示每次提交的差异</li>\\n<li><code>-2</code> 显示最近的两次提交</li>\\n</ul>\\n</li>\\n<li><code>git reset</code>\\n<ul>\\n<li><code>HEAD &lt;file&gt;</code> 取消暂存</li>\\n</ul>\\n</li>\\n<li><code>git restore</code>\\n<ul>\\n<li><code>--staged</code> 仅取消暂存（不改动工作区）</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}');export{P as comp,D as data};
