import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as n,o as t}from"./app-Cc-V_zzY.js";const e="/blog/assets/posts/CMU15445-Refs/p1/1.png",l="/blog/assets/posts/CMU15445-Refs/p1/2.png",p="/blog/assets/posts/CMU15445-Refs/p1/3.png",h={};function k(r,s){return t(),a("div",null,s[0]||(s[0]=[n('<h1 id="cmu15445-spring-2023-project-1-buffer-pool" tabindex="-1"><a class="header-anchor" href="#cmu15445-spring-2023-project-1-buffer-pool"><span>CMU15445 (Spring 2023) Project #1 - Buffer Pool</span></a></h1><h2 id="进度" tabindex="-1"><a class="header-anchor" href="#进度"><span>进度</span></a></h2><p><strong>2023-05-04 五四青年节hh</strong></p><p>最近一直在补算法，今天抽出一点时间完成了 Project1 的第一部分 即 <code>LRU-K置换</code>，看上去并不难，但做的过程却还是挺曲折的，令人唏嘘。</p><p><strong>2023-05-06</strong><br> 全部完成，但有一个 bug 找了一天（太折磨了）也没找到。导致最后一个 test 死活过不去，应当是 写回页面 和 pincount 没有协调好。因此后面两部分都不能保证我的理解是对的。并且马上要准备面试了，就暂时鸽了后面的两部分，等我不忙了，再来debug，将其补上。</p><p><strong>2023-05-12</strong> 华为笔试过了、综合测评早上做完，希望能过。今天晚上把 bug 找到了。</p><p><strong>2023-07-21</strong> 补充 task2 部分 tips 答案</p><h2 id="一、你可能需要知道的" tabindex="-1"><a class="header-anchor" href="#一、你可能需要知道的"><span>一、你可能需要知道的</span></a></h2><ul><li><a href="https://dl.acm.org/doi/epdf/10.1145/170036.170081" target="_blank" rel="noopener noreferrer">LRU-Kl论文</a></li><li><a href="https://leetcode.cn/problems/lru-cache/" target="_blank" rel="noopener noreferrer">Leetcode 146-LRU</a></li><li><a href="http://t.csdn.cn/DunuC" target="_blank" rel="noopener noreferrer">LRU, LFU, LRU-K</a></li><li><a href="https://15445.courses.cs.cmu.edu/spring2023/project1/" target="_blank" rel="noopener noreferrer">官方文档</a></li></ul><p>论文可以不看 Leetcode可以做一下</p><h2 id="二、三个task" tabindex="-1"><a class="header-anchor" href="#二、三个task"><span>二、三个Task</span></a></h2><h3 id="task-1-lru-k-replacement-policy" tabindex="-1"><a class="header-anchor" href="#task-1-lru-k-replacement-policy"><span>Task #1 - LRU-K Replacement Policy</span></a></h3><p>这里关键是要先弄懂题目的意思，想想一些临界情况出现该怎么应对。</p><h3 id="理解" tabindex="-1"><a class="header-anchor" href="#理解"><span>理解</span></a></h3><p>LRU-K 这个结构是用来记录、更新、删除 <strong>页(frame)</strong> 的。 对于每一页，我们记录它出现的历史的时间戳，出现一次记一次，那么历史链表的长度即为这一页出现的次数。链表的长度小于等于 K，意即我们最多记录它出现的最后 K 次，如果超过 K 次，我们删去链表头部，并将新的时间戳加到链表尾部。最后，历史链表应是由小到大的时间戳组成的链表。</p><p><strong>K-Distance计算</strong> - 如果它出现的次数小于 K ，那么它的 K-Distance 为 无穷大。 - 如果它出现的次数大于等于 K ，那么它的 K-Distance 对应于它的历史链表的头部，即倒数第 K 次出现的时间戳。</p><p><strong>比 LRU 好在哪儿？</strong></p><p>见课堂，面对数据洪流 (sequential flood)，LRU 将被冲刷掉导致低效率。而 LRU-K 还加入了对次数的统计，有效抵抗了这种现象。</p><p><strong>驱逐方法</strong></p><p>K-Distance 指导我们驱逐页，只要有 K-Distance 为无穷大的页，我们都优先驱逐。没有，再考虑对 K-Distance 有限的页进行驱逐。很合理：我们要尽可能保留出现次数多的页，优先驱逐出现次数少的。</p><p>那多个页的 K-Distance 都为无穷大，我们先驱逐哪一个呢？ 如果多个页的 K-Distance 均为无穷大，我们使用 FIFO 进行驱逐。</p><p><a href="https://15445.courses.cs.cmu.edu/spring2023/project1/" target="_blank" rel="noopener noreferrer">官方文档</a></p><blockquote><p>When multiple frames have +inf backward k-distance, the replacer evicts the frame with the earliest overall timestamp (i.e., the frame whose least-recent recorded access is the overall least recent access, overall, out of all frames).</p></blockquote><p>这里它的意思是，如果多个页的 K-Distance 均为无穷大，我们使用 FIFO 进行驱逐,但它又在编程那个文件里写用 LRU 进行驱逐。我最后看了它的 Test 发现应该是用 FIFO(First in First out) 进行驱逐，即哪个页最先出现哪个被驱逐。</p><p>如果没有无穷大的了，我们就考虑对K-Distance 有限的页进行驱逐。方法是，我们驱逐 K-Distance 最小的页，这很好理解，K-Distance最小代表它的倒数第 K 次出现最遥远，时间局部性更弱。 <code>注意：我们驱逐页的时候要判断该页是否可以驱逐。</code></p><p>我画了张图，其中 <strong>K=2</strong></p><figure><img src="'+e+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们观察倒数第二次出现的位置</p><h3 id="性能" tabindex="-1"><a class="header-anchor" href="#性能"><span>性能</span></a></h3><p>我们期望 插入、删除等的时间都很快，是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 最好。在leetcode那道题中 LRU 均能达到常数时间，但对于 LRU-K 因为要记录历史，删除也要根据历史，时间复杂度并不能令人满意。 网上的做法都是 维护两个链表，一个表示出现小于 K 次，一个表示出现大于等于 K 次。在对第二个链表操作时，时间复杂度将会到达 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span> 。（要么<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>的插入<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>的删除，要么<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>的删除<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>的插入） 我的做法是对于出现次数小于 K 的使用链表，出现大于等于 K 次的使用红黑树 <code>std::set</code>。对其比较算符进行重载即可达到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(logN)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>的插入<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(logN)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>的删除。 对于如何<a href="http://www.qb5200.com/article/409171.html" target="_blank" rel="noopener noreferrer">更新set</a>，我一开始是通过取地址进行更新的。但事实上我们不应更改 set 中的值。理由是，set 定义好之后是定序的，但我们更新完， set 并不会随之改变顺序。这个错误浪费了我一个小时。所以后来我改成，删除-&gt;更新-&gt;加入。</p><p>这里可能有人觉得小根堆的做法更加高效，可以达到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(logN)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>的插入<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>的删除，可是在驱逐的时候我们需要遍历次数大于等于 K 的页，但使用小根堆并不利于遍历。</p><h3 id="实现" tabindex="-1"><a class="header-anchor" href="#实现"><span>实现</span></a></h3><p>课程要求不公布代码，这里我列出我在头文件中用到的数据结构帮助大家开头（不一定要和我一样） <code>最好自己先想想怎么实现，这里实现的方法很灵活</code></p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> LRUKNode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  size_t k_{};</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">  frame_id_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> fid_{};</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  bool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> is_evictable_{</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  std::list&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">LRUKNode</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;::iterator pos_;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  std::list</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;size_t&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> history_;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> LRUKReplacer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  std::</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">unordered_map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">frame_id_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">LRUKNode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; node_store_;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  std::list</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">LRUKNode</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> node_less_k_;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  std::set</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">LRUKNode</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, MyCompare</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> node_more_k_;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  size_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> current_timestamp_{</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  size_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> curr_size_{</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  size_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> replacer_size_;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  size_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> k_;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  std::mutex latch_;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>如果您选择使用 <code>frame_id_t</code> 就不要用红黑树，两个都用链表。因为涉及到权限的问题，比较的时候读取不到 <code>node_store_</code></strong></p><p>（使用指针需要谨慎处理局部变量）</p><p><strong>用红黑树不会快多少，不推荐，请使用链表。</strong></p><p>最后是线程安全，直接上锁，全锁住即可。</p><p>使用 <code>std::scoped_lock</code>（after C++17）或 <code>std::lock_guard</code>（after C++11）</p><p><a href="https://zhuanlan.zhihu.com/p/461530638" target="_blank" rel="noopener noreferrer">GoodLiu：C++编程技巧：Scoped Locking</a></p><hr><h3 id="task-2-buffer-pool-manager" tabindex="-1"><a class="header-anchor" href="#task-2-buffer-pool-manager"><span>Task #2 - Buffer Pool Manager</span></a></h3><p><a href="https://cloud.tencent.com/developer/article/2114126" target="_blank" rel="noopener noreferrer">【MySQL系列】- 浅入Buffer Pool-腾讯云开发者社区-腾讯云</a></p><p>数据库存储在硬盘上，buffer pool 其实就是数据库在内存中的部分，相当于缓存一般。这部分整体不难，按照其提示写即可。<br><code>大致结构：</code></p><figure><img src="`+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><code>pages_:</code> 页框</li><li><code>disk_manager:</code> 即硬盘管理类，用于更新脏页</li><li><code>log_manager:</code> 不用管</li><li><code>page_table_:</code> 页表，用于映射页到页框</li><li><code>replacer_:</code> 之前写的LRU-K策略</li><li><code>free_list_:</code> 空闲链表，维护可用空间</li><li><code>latch_:</code> 锁</li></ul><p>下面说几个 tips 需要注意：</p><blockquote><ol><li>pages_ 维护的是页框，所以用 frame_id 作下标</li></ol></blockquote><blockquote><ol start="2"><li>您是否真的想清楚 <code>pin_count</code> 的含义? 如：当一个线程 <code>fetchpage</code> 时，如果这页已经存在于 buffer pool 中，它的 <code>pin_count</code> 应如何变化？</li></ol></blockquote><p>答： pin 的英文含义是钉住。如果一个页的内容被一个线程使用，<em>我们就不能驱逐它到硬盘，而是应该将其留在内存中加速读写</em> 。<code>pin_count</code> 就对应了这张页有多少使用者，只有为 0 才可以将页设为 Evictable 。所以对于已经在 buffer pool 中的页 每一次 <code>fetchpage</code> 我们都需要将 <code>pin_count</code> 递增 。</p><blockquote><ol start="3"><li>您是否清楚 <code>is_dirty</code> 的含义，是否考虑清楚何时要更改之？ 如：在 <code>unpinpage</code>时，您能简单的令<code>pages_[the_frame].is_dirty_ = is_dirty;</code>吗？</li></ol></blockquote><p>答： 将一个页从磁盘拿到内存，随后在内存中修改之。此时磁盘与内存的数据就<strong>不一致</strong>了，那这时如果内存不够需要驱逐这一页，我们就不能简单的直接将其从内存中驱逐，而是先把它写回磁盘，保持数据的一致性，再从内存中驱逐它。我们可以不分青红皂白每次都简单的将其写回磁盘，但丧失效率，或者我们使用一个标记：</p><p>这个标记告诉我们这一页是否在内存中是否被修改过。这就是 <code>is_dirty</code> ，被修改过就是脏 (dirty) 。那在 unpinpage 的时候，如果一个页已经是 dirty 了，我们当然就不能更改它的状态。</p><blockquote><ol start="4"><li>是否记得更新 pin_count 和 is_dirty 的状态？</li></ol></blockquote><blockquote><ol start="5"><li>是否记得将拿到的页面写入 <code>replacer_</code>？有顺序要求吗？</li></ol></blockquote><p>答：先<code>RecordAccess</code> 再 <code>SetEvictable</code></p><p>基本上想清楚这些再结合头文件里的提示写就很好过了。</p><hr><h3 id="task-3-read-write-page-guards" tabindex="-1"><a class="header-anchor" href="#task-3-read-write-page-guards"><span>Task #3 - Read/Write Page Guards</span></a></h3><p>这部分要求我们实现 RAII 来管理页，最后写的代码不多，但暗藏很多bug，要细心编写。</p><p>下面也列出我编写时考虑的问题：</p><ol><li><p>移动赋值时，记得处理自赋值。其次，旧值应当被妥善处理，因为其正管理着一页。</p></li><li><p>保证移动后原对象完全不可用。</p></li><li><p>drop() 后应当保证 析构函数 无作为</p></li></ol><p>附上一个我想了一天的 bug :</p><p>在调用 unpinpage 时，应当这样 <code>bpm_-&gt;UnpinPage(page_-&gt;GetPageId(), is_dirty_);</code></p><p>而非这样 <code>bpm_-&gt;UnpinPage(page_-&gt;GetPageId(), page_-&gt;IsDirty());</code></p><p>原因是这里的<code>is_dirty_</code> 可以理解为 pageguard 自带的脏位，和页的脏位是独立的。阅读其<code>GetDataMut()</code>便可发现，pageguard 自行更新自己的脏位，并利用 <code>unpinpage</code> 传递，我们无需关心页的脏位。这也解释了为什么我们在编写 <code>unpinpage</code>时要设置脏位。</p><p>这个bug 花了很久的时间发现，我总结了几点原因：</p><ol><li><p>test反馈的结果很离谱，最终错误体现在 pin_count 上，导致我花大量精力检查前面部分的内容，pin_count 的逻辑</p></li><li><p>打 log 研究 log 花了很长时间，然而一开始方向就错了 最终花时间写了个 test 然而也没有用</p></li><li><p>最开始做的时候并没有真正理解每一个变量设置的含义，写代码时有些想当然。</p></li><li><p>最后在阅读<code>GetDataMut()</code>更新 is_dirty 时灵光一现，感觉到了蹊跷，找到 bug</p></li></ol><p>附上 没有帮助到我的test... 其涵盖了几个小小坑</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">TEST</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(PageGuardTest, HHTest) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std::string db_name </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;test.db&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> size_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> buffer_pool_size </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> size_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> k </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> disk_manager </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">make_shared</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">DiskManagerUnlimitedMemory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> bpm </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">make_shared</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">BufferPoolManager</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;(buffer_pool_size, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">disk_manager</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), k);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">  page_id_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> page_id_temp </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">  page_id_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> page_id_temp_a;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  auto</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">page0 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> bpm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">NewPage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">page_id_temp);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  auto</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">page1 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> bpm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">NewPage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">page_id_temp_a);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> guarded_page </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> BasicPageGuard</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">bpm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), page0);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> guarded_page_a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> BasicPageGuard</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">bpm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), page1);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // after drop, whether destructor decrements the pin_count_ ?</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> read_guard1 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> bpm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FetchPageRead</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(page_id_temp_a);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    EXPECT_EQ</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">page1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetPinCount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    read_guard1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Drop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    EXPECT_EQ</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">page1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetPinCount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  EXPECT_EQ</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">page0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetPinCount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  EXPECT_EQ</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">page1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetPinCount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // test the move assignment</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> read_guard1 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> bpm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FetchPageRead</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(page_id_temp);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> read_guard2 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> bpm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FetchPageRead</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(page_id_temp_a);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    EXPECT_EQ</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">page0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetPinCount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    EXPECT_EQ</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">page1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetPinCount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    read_guard2 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">move</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(read_guard1);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    EXPECT_EQ</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">page0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetPinCount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    EXPECT_EQ</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">page1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetPinCount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  EXPECT_EQ</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">page0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetPinCount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // test the move constructor</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> read_guard1 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> bpm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">FetchPageRead</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(page_id_temp);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    auto</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> read_guard2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">std</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">move</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(read_guard1));</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    auto</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> read_guard3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">std</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">move</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(read_guard2));</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    EXPECT_EQ</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">page0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetPinCount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  EXPECT_EQ</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">page0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetPinCount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  EXPECT_EQ</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(page_id_temp, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">page0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetPageId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // repeat drop</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  guarded_page</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Drop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  EXPECT_EQ</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">page0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetPinCount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  guarded_page</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Drop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  EXPECT_EQ</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">page0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetPinCount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  disk_manager</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ShutDown</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><ol><li>感觉代码实现起来难度不高，但 debug 是真的太痛苦了，能花几倍的时间</li><li>写之前先看完头文件，掌握每一个的含义再开始编程</li><li>很多地方可以再优化，如：</li></ol><ul><li>我们对 buffer pool 显然是读多写少，一把大锁很影响性能，可以考虑上读写锁。</li><li>显然测试的瓶颈在<strong>磁盘IO</strong>，但我们在持有大锁的情况下进行磁盘IO 最终是很损失性能的</li></ul><p>但得益于我的 LRU-K 相对高效，靠一把大锁也得到了不错的排名 21/117，hhh 后续有机会再优化一下。</p><figure><img src="`+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',75)]))}const o=i(h,[["render",k],["__file","p1.html.vue"]]),c=JSON.parse('{"path":"/posts/project/CMU15445/p1.html","title":"CMU15445 (Spring 2023) Project #1 - Buffer Pool","lang":"zh-CN","frontmatter":{"date":"2024-07-11T00:00:00.000Z","category":["数据库"],"tag":["C++"],"footer":"凉了的馒头","description":"CMU15445 (Spring 2023) Project #1 - Buffer Pool 进度 2023-05-04 五四青年节hh 最近一直在补算法，今天抽出一点时间完成了 Project1 的第一部分 即 LRU-K置换，看上去并不难，但做的过程却还是挺曲折的，令人唏嘘。 2023-05-06 全部完成，但有一个 bug 找了一天（太折磨了）...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/project/CMU15445/p1.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"CMU15445 (Spring 2023) Project #1 - Buffer Pool"}],["meta",{"property":"og:description","content":"CMU15445 (Spring 2023) Project #1 - Buffer Pool 进度 2023-05-04 五四青年节hh 最近一直在补算法，今天抽出一点时间完成了 Project1 的第一部分 即 LRU-K置换，看上去并不难，但做的过程却还是挺曲折的，令人唏嘘。 2023-05-06 全部完成，但有一个 bug 找了一天（太折磨了）..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p1/1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-10T03:04:45.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:published_time","content":"2024-07-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-10T03:04:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CMU15445 (Spring 2023) Project #1 - Buffer Pool\\",\\"image\\":[\\"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p1/1.png\\",\\"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p1/2.png\\",\\"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p1/3.png\\"],\\"datePublished\\":\\"2024-07-11T00:00:00.000Z\\",\\"dateModified\\":\\"2025-01-10T03:04:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Tyz\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"进度","slug":"进度","link":"#进度","children":[]},{"level":2,"title":"一、你可能需要知道的","slug":"一、你可能需要知道的","link":"#一、你可能需要知道的","children":[]},{"level":2,"title":"二、三个Task","slug":"二、三个task","link":"#二、三个task","children":[{"level":3,"title":"Task #1 - LRU-K Replacement Policy","slug":"task-1-lru-k-replacement-policy","link":"#task-1-lru-k-replacement-policy","children":[]},{"level":3,"title":"理解","slug":"理解","link":"#理解","children":[]},{"level":3,"title":"性能","slug":"性能","link":"#性能","children":[]},{"level":3,"title":"实现","slug":"实现","link":"#实现","children":[]},{"level":3,"title":"Task #2 - Buffer Pool Manager","slug":"task-2-buffer-pool-manager","link":"#task-2-buffer-pool-manager","children":[]},{"level":3,"title":"Task #3 - Read/Write Page Guards","slug":"task-3-read-write-page-guards","link":"#task-3-read-write-page-guards","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1736478285000,"updatedTime":1736478285000,"contributors":[{"name":"BUAA-TYZ","username":"BUAA-TYZ","email":"2506741037@qq.com","commits":1,"url":"https://github.com/BUAA-TYZ"}]},"readingTime":{"minutes":9.55,"words":2865},"filePathRelative":"posts/project/CMU15445/p1.md","localizedDate":"2024年7月11日","excerpt":"\\n<h2>进度</h2>\\n<p><strong>2023-05-04 五四青年节hh</strong></p>\\n<p>最近一直在补算法，今天抽出一点时间完成了 Project1 的第一部分 即 <code>LRU-K置换</code>，看上去并不难，但做的过程却还是挺曲折的，令人唏嘘。</p>\\n<p><strong>2023-05-06</strong><br>\\n全部完成，但有一个 bug 找了一天（太折磨了）也没找到。导致最后一个 test 死活过不去，应当是 写回页面 和 pincount 没有协调好。因此后面两部分都不能保证我的理解是对的。并且马上要准备面试了，就暂时鸽了后面的两部分，等我不忙了，再来debug，将其补上。</p>","autoDesc":true}');export{o as comp,c as data};
