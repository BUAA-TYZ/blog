import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as i,o as l}from"./app-GvbLqAZr.js";const p={};function e(c,n){return l(),a("div",null,n[0]||(n[0]=[i(`<h1 id="cs143-project2-词法分析" tabindex="-1"><a class="header-anchor" href="#cs143-project2-词法分析"><span>CS143 Project2 词法分析</span></a></h1><p>第二个项目是关于词法分析的，属于编译器的前端部分。给定一个 cool 语言程序，我们将输入的程序分解成不同类型的token: <code>&lt;TOKEN_CLASS, lexeme&gt;</code>。比如：关键字，操作符等。<br> 完成本项目需要使用<strong>flex</strong>工具，我们需要编写一个描述词法规则的文件，flex 可以读取该文件并生成一个 C 程序来进行词法分析。<br> 撰写规则需要用到正则表达式以及阅读一些 flex 为我们提供的方便的语法。</p><div class="language-lex line-numbers-mode" data-highlighter="shiki" data-ext="lex" data-title="lex" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>/*</span></span>
<span class="line"><span> * Define names for regular expressions here.</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span></span></span>
<span class="line"><span>DARROW  =&gt;</span></span>
<span class="line"><span>LE  &lt;=</span></span>
<span class="line"><span>ASSIGN &lt;-</span></span>
<span class="line"><span>DIGIT  [0-9]</span></span>
<span class="line"><span>CHAR   [a-zA-Z0-9_]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>%x  STR </span></span>
<span class="line"><span>%x  CMT</span></span>
<span class="line"><span></span></span>
<span class="line"><span>%%</span></span>
<span class="line"><span></span></span>
<span class="line"><span> /*</span></span>
<span class="line"><span>  *  Nested comments</span></span>
<span class="line"><span>  */</span></span>
<span class="line"><span></span></span>
<span class="line"><span> /* Single line comment. */</span></span>
<span class="line"><span>--[^\\n]*  {}</span></span>
<span class="line"><span></span></span>
<span class="line"><span> /* Multiple lines comment. */</span></span>
<span class="line"><span>\\*\\)  {</span></span>
<span class="line"><span>  BEGIN(INITIAL);</span></span>
<span class="line"><span>  yylval.error_msg = &quot;Unmatched *)&quot;;</span></span>
<span class="line"><span>  return (ERROR);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;INITIAL,CMT&gt;\\(\\*  { </span></span>
<span class="line"><span>  BEGIN(CMT); </span></span>
<span class="line"><span>  ++comment_depth;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;CMT&gt;[^*\\n]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;CMT&gt;&quot;*&quot;+[^*)\\n]*</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;CMT&gt;\\n  curr_lineno++;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;CMT&gt;&quot;*&quot;+&quot;)&quot;  {</span></span>
<span class="line"><span>  if (--comment_depth == 0) {</span></span>
<span class="line"><span>    BEGIN(INITIAL);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;CMT&gt;&lt;&lt;EOF&gt;&gt; {</span></span>
<span class="line"><span>  BEGIN(INITIAL);</span></span>
<span class="line"><span>  yylval.error_msg = &quot;EOF in comment&quot;;</span></span>
<span class="line"><span>  return (ERROR);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span> /*</span></span>
<span class="line"><span>  *  The multiple-character operators.</span></span>
<span class="line"><span>  */</span></span>
<span class="line"><span></span></span>
<span class="line"><span>{DARROW}  { return (DARROW); }</span></span>
<span class="line"><span>{LE}  { return (LE); }</span></span>
<span class="line"><span>{ASSIGN}  { return (ASSIGN); }</span></span>
<span class="line"><span></span></span>
<span class="line"><span> /*</span></span>
<span class="line"><span>  *  Integer. It allows a number to start with 0, like C.</span></span>
<span class="line"><span>  */</span></span>
<span class="line"><span>{DIGIT}+  { </span></span>
<span class="line"><span>  yylval.symbol = inttable.add_string(yytext);</span></span>
<span class="line"><span>  return (INT_CONST); </span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span> /*</span></span>
<span class="line"><span>  * Keywords are case-insensitive except for the values true and false,</span></span>
<span class="line"><span>  * which must begin with a lower-case letter.</span></span>
<span class="line"><span>  */</span></span>
<span class="line"><span></span></span>
<span class="line"><span>(?i:class)  return (CLASS); </span></span>
<span class="line"><span>(?i:if)   return (IF); </span></span>
<span class="line"><span>(?i:fi)   return (FI); </span></span>
<span class="line"><span>(?i:inherits)   return (INHERITS); </span></span>
<span class="line"><span>(?i:else)   return (ELSE); </span></span>
<span class="line"><span>(?i:in)   return (IN); </span></span>
<span class="line"><span>(?i:isvoid)   return (ISVOID); </span></span>
<span class="line"><span>(?i:let)   return (LET); </span></span>
<span class="line"><span>(?i:pool)   return (POOL); </span></span>
<span class="line"><span>(?i:loop)   return (LOOP); </span></span>
<span class="line"><span>(?i:then)   return (THEN); </span></span>
<span class="line"><span>(?i:while)   return (WHILE); </span></span>
<span class="line"><span>(?i:case)   return (CASE); </span></span>
<span class="line"><span>(?i:esac)   return (ESAC); </span></span>
<span class="line"><span>(?i:new)   return (NEW); </span></span>
<span class="line"><span>(?i:of)   return (OF); </span></span>
<span class="line"><span>(?i:not)   return (NOT); </span></span>
<span class="line"><span></span></span>
<span class="line"><span>t(?i:rue) { </span></span>
<span class="line"><span>    yylval.boolean = 1;</span></span>
<span class="line"><span>    return (BOOL_CONST); </span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>f(?i:alse) {</span></span>
<span class="line"><span>  yylval.boolean = 0; </span></span>
<span class="line"><span>  return (BOOL_CONST); </span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span> /*</span></span>
<span class="line"><span>  *  TYPEID. </span></span>
<span class="line"><span>  */</span></span>
<span class="line"><span>[A-Z]{CHAR}*|SELF_TYPE {</span></span>
<span class="line"><span>  cool_yylval.symbol = idtable.add_string(yytext);</span></span>
<span class="line"><span>  return (TYPEID);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span> /*</span></span>
<span class="line"><span>  *  String constants (C syntax)</span></span>
<span class="line"><span>  *  Escape sequence \\c is accepted for all characters c. Except for </span></span>
<span class="line"><span>  *  \\n \\t \\b \\f, the result is c.</span></span>
<span class="line"><span>  *</span></span>
<span class="line"><span>  */</span></span>
<span class="line"><span></span></span>
<span class="line"><span>\\&quot;  BEGIN(STR); yymore();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;STR&gt;[^\\\\\\&quot;\\n]*  yymore();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;STR&gt;\\\\[^\\n]  yymore();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;STR&gt;\\\\\\n {</span></span>
<span class="line"><span>  curr_lineno++;</span></span>
<span class="line"><span>  yymore();</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;STR&gt;&lt;&lt;EOF&gt;&gt; {</span></span>
<span class="line"><span>  BEGIN(INITIAL);</span></span>
<span class="line"><span>  yylval.error_msg = &quot;EOF in string constant&quot;;</span></span>
<span class="line"><span>  /* flushes the scanner’s internal buffer so that the next time the scanner attempts to match a token,</span></span>
<span class="line"><span>   it will first refill the buffer using YY_INPUT(). Or use yyrestart(yyin); */</span></span>
<span class="line"><span>  YY_FLUSH_BUFFER;</span></span>
<span class="line"><span>  return (ERROR); </span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;STR&gt;\\n {</span></span>
<span class="line"><span>  BEGIN(INITIAL);</span></span>
<span class="line"><span>  yylval.error_msg = &quot;Unterminated string constant&quot;;</span></span>
<span class="line"><span>  curr_lineno++;</span></span>
<span class="line"><span>  return (ERROR); </span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;STR&gt;\\&quot; {</span></span>
<span class="line"><span>  std::string input(yytext, yyleng);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // remove the &#39;\\&quot;&#39;s on both sides.</span></span>
<span class="line"><span>  input = input.substr(1, input.length() - 2);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  std::string output = &quot;&quot;;</span></span>
<span class="line"><span>  std::string::size_type pos;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  if (input.find_first_of(&#39;\\0&#39;) != std::string::npos) {</span></span>
<span class="line"><span>    yylval.error_msg = &quot;String contains null character&quot;;</span></span>
<span class="line"><span>    BEGIN 0;</span></span>
<span class="line"><span>    return ERROR;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  while ((pos = input.find_first_of(&quot;\\\\&quot;)) != std::string::npos) {</span></span>
<span class="line"><span>    output += input.substr(0, pos);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    switch (input[pos + 1]) {</span></span>
<span class="line"><span>      case &#39;b&#39;:</span></span>
<span class="line"><span>        output += &quot;\\b&quot;;</span></span>
<span class="line"><span>        break;</span></span>
<span class="line"><span>      case &#39;t&#39;:</span></span>
<span class="line"><span>        output += &quot;\\t&quot;;</span></span>
<span class="line"><span>        break;</span></span>
<span class="line"><span>      case &#39;n&#39;:</span></span>
<span class="line"><span>        output += &quot;\\n&quot;;</span></span>
<span class="line"><span>        break;</span></span>
<span class="line"><span>      case &#39;f&#39;:</span></span>
<span class="line"><span>        output += &quot;\\f&quot;;</span></span>
<span class="line"><span>        break;</span></span>
<span class="line"><span>      default:</span></span>
<span class="line"><span>        output += input[pos + 1];</span></span>
<span class="line"><span>        break;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    input = input.substr(pos + 2, input.length() - 2);</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  output += input;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  if (output.length() &gt; MAX_STR_CONST - 1) {</span></span>
<span class="line"><span>    BEGIN (INITIAL);</span></span>
<span class="line"><span>    yylval.error_msg = &quot;String constant too long&quot;;</span></span>
<span class="line"><span>    return ERROR;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  yylval.symbol = stringtable.add_string((char*)output.c_str());</span></span>
<span class="line"><span>  BEGIN (INITIAL);</span></span>
<span class="line"><span>  return (STR_CONST);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span> /*</span></span>
<span class="line"><span>  *  OBJECTID. </span></span>
<span class="line"><span>  */</span></span>
<span class="line"><span>[a-z]{CHAR}* {</span></span>
<span class="line"><span>  yylval.symbol = idtable.add_string(yytext);</span></span>
<span class="line"><span>  return (OBJECTID);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>\\n  curr_lineno++;</span></span>
<span class="line"><span>\\0 {</span></span>
<span class="line"><span>  BEGIN(INITIAL);</span></span>
<span class="line"><span>  yylval.error_msg = &quot;Code contains null character&quot;;</span></span>
<span class="line"><span>  return (ERROR);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>[ \\t\\f\\r\\v]+ {}</span></span>
<span class="line"><span></span></span>
<span class="line"><span> /* There are some unprintable characters, so must list all allowed characters. */</span></span>
<span class="line"><span>[+/\\-*=&lt;\\.~,;:()@{}] { return yytext[0]; }</span></span>
<span class="line"><span></span></span>
<span class="line"><span> /* Invalid char.  */</span></span>
<span class="line"><span>. {</span></span>
<span class="line"><span>  cool_yylval.error_msg = yytext;</span></span>
<span class="line"><span>  return (ERROR);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>%%</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>其实也可以自己手动编写，见南大 PA1。不过利用 flex 生成更方便。</li><li>这一步已经可以初步找出一些错误了，比如字符串过长、非法字符等等。同时，注释在这一步已经被编译器过滤了。</li></ul>`,4)]))}const r=s(p,[["render",e],["__file","p2.html.vue"]]),u=JSON.parse(`{"path":"/posts/project/CS143/p2.html","title":"CS143 Project2 词法分析","lang":"zh-CN","frontmatter":{"date":"2025-02-26T00:00:00.000Z","category":["编译原理"],"tag":["C++"],"footer":"凉了的馒头","description":"CS143 Project2 词法分析 第二个项目是关于词法分析的，属于编译器的前端部分。给定一个 cool 语言程序，我们将输入的程序分解成不同类型的token: <TOKEN_CLASS, lexeme>。比如：关键字，操作符等。 完成本项目需要使用flex工具，我们需要编写一个描述词法规则的文件，flex 可以读取该文件并生成一个 C 程序来进行...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/project/CS143/p2.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"CS143 Project2 词法分析"}],["meta",{"property":"og:description","content":"CS143 Project2 词法分析 第二个项目是关于词法分析的，属于编译器的前端部分。给定一个 cool 语言程序，我们将输入的程序分解成不同类型的token: <TOKEN_CLASS, lexeme>。比如：关键字，操作符等。 完成本项目需要使用flex工具，我们需要编写一个描述词法规则的文件，flex 可以读取该文件并生成一个 C 程序来进行..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-28T02:00:41.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:published_time","content":"2025-02-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-28T02:00:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CS143 Project2 词法分析\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-02-26T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-28T02:00:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Tyz\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1740708041000,"updatedTime":1740708041000,"contributors":[{"name":"BUAA-TYZ","username":"BUAA-TYZ","email":"2506741037@qq.com","commits":1,"url":"https://github.com/BUAA-TYZ"}]},"readingTime":{"minutes":2.39,"words":717},"filePathRelative":"posts/project/CS143/p2.md","localizedDate":"2025年2月26日","excerpt":"\\n<p>第二个项目是关于词法分析的，属于编译器的前端部分。给定一个 cool 语言程序，我们将输入的程序分解成不同类型的token: <code>&lt;TOKEN_CLASS, lexeme&gt;</code>。比如：关键字，操作符等。<br>\\n完成本项目需要使用<strong>flex</strong>工具，我们需要编写一个描述词法规则的文件，flex 可以读取该文件并生成一个 C 程序来进行词法分析。<br>\\n撰写规则需要用到正则表达式以及阅读一些 flex 为我们提供的方便的语法。</p>\\n<div class=\\"language-lex line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"lex\\" data-title=\\"lex\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span>/*</span></span>\\n<span class=\\"line\\"><span> * Define names for regular expressions here.</span></span>\\n<span class=\\"line\\"><span> */</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>DARROW  =&gt;</span></span>\\n<span class=\\"line\\"><span>LE  &lt;=</span></span>\\n<span class=\\"line\\"><span>ASSIGN &lt;-</span></span>\\n<span class=\\"line\\"><span>DIGIT  [0-9]</span></span>\\n<span class=\\"line\\"><span>CHAR   [a-zA-Z0-9_]</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>%x  STR </span></span>\\n<span class=\\"line\\"><span>%x  CMT</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>%%</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span> /*</span></span>\\n<span class=\\"line\\"><span>  *  Nested comments</span></span>\\n<span class=\\"line\\"><span>  */</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span> /* Single line comment. */</span></span>\\n<span class=\\"line\\"><span>--[^\\\\n]*  {}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span> /* Multiple lines comment. */</span></span>\\n<span class=\\"line\\"><span>\\\\*\\\\)  {</span></span>\\n<span class=\\"line\\"><span>  BEGIN(INITIAL);</span></span>\\n<span class=\\"line\\"><span>  yylval.error_msg = \\"Unmatched *)\\";</span></span>\\n<span class=\\"line\\"><span>  return (ERROR);</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>&lt;INITIAL,CMT&gt;\\\\(\\\\*  { </span></span>\\n<span class=\\"line\\"><span>  BEGIN(CMT); </span></span>\\n<span class=\\"line\\"><span>  ++comment_depth;</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>&lt;CMT&gt;[^*\\\\n]</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>&lt;CMT&gt;\\"*\\"+[^*)\\\\n]*</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>&lt;CMT&gt;\\\\n  curr_lineno++;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>&lt;CMT&gt;\\"*\\"+\\")\\"  {</span></span>\\n<span class=\\"line\\"><span>  if (--comment_depth == 0) {</span></span>\\n<span class=\\"line\\"><span>    BEGIN(INITIAL);</span></span>\\n<span class=\\"line\\"><span>  }</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>&lt;CMT&gt;&lt;&lt;EOF&gt;&gt; {</span></span>\\n<span class=\\"line\\"><span>  BEGIN(INITIAL);</span></span>\\n<span class=\\"line\\"><span>  yylval.error_msg = \\"EOF in comment\\";</span></span>\\n<span class=\\"line\\"><span>  return (ERROR);</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span> /*</span></span>\\n<span class=\\"line\\"><span>  *  The multiple-character operators.</span></span>\\n<span class=\\"line\\"><span>  */</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>{DARROW}  { return (DARROW); }</span></span>\\n<span class=\\"line\\"><span>{LE}  { return (LE); }</span></span>\\n<span class=\\"line\\"><span>{ASSIGN}  { return (ASSIGN); }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span> /*</span></span>\\n<span class=\\"line\\"><span>  *  Integer. It allows a number to start with 0, like C.</span></span>\\n<span class=\\"line\\"><span>  */</span></span>\\n<span class=\\"line\\"><span>{DIGIT}+  { </span></span>\\n<span class=\\"line\\"><span>  yylval.symbol = inttable.add_string(yytext);</span></span>\\n<span class=\\"line\\"><span>  return (INT_CONST); </span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span> /*</span></span>\\n<span class=\\"line\\"><span>  * Keywords are case-insensitive except for the values true and false,</span></span>\\n<span class=\\"line\\"><span>  * which must begin with a lower-case letter.</span></span>\\n<span class=\\"line\\"><span>  */</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>(?i:class)  return (CLASS); </span></span>\\n<span class=\\"line\\"><span>(?i:if)   return (IF); </span></span>\\n<span class=\\"line\\"><span>(?i:fi)   return (FI); </span></span>\\n<span class=\\"line\\"><span>(?i:inherits)   return (INHERITS); </span></span>\\n<span class=\\"line\\"><span>(?i:else)   return (ELSE); </span></span>\\n<span class=\\"line\\"><span>(?i:in)   return (IN); </span></span>\\n<span class=\\"line\\"><span>(?i:isvoid)   return (ISVOID); </span></span>\\n<span class=\\"line\\"><span>(?i:let)   return (LET); </span></span>\\n<span class=\\"line\\"><span>(?i:pool)   return (POOL); </span></span>\\n<span class=\\"line\\"><span>(?i:loop)   return (LOOP); </span></span>\\n<span class=\\"line\\"><span>(?i:then)   return (THEN); </span></span>\\n<span class=\\"line\\"><span>(?i:while)   return (WHILE); </span></span>\\n<span class=\\"line\\"><span>(?i:case)   return (CASE); </span></span>\\n<span class=\\"line\\"><span>(?i:esac)   return (ESAC); </span></span>\\n<span class=\\"line\\"><span>(?i:new)   return (NEW); </span></span>\\n<span class=\\"line\\"><span>(?i:of)   return (OF); </span></span>\\n<span class=\\"line\\"><span>(?i:not)   return (NOT); </span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>t(?i:rue) { </span></span>\\n<span class=\\"line\\"><span>    yylval.boolean = 1;</span></span>\\n<span class=\\"line\\"><span>    return (BOOL_CONST); </span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>f(?i:alse) {</span></span>\\n<span class=\\"line\\"><span>  yylval.boolean = 0; </span></span>\\n<span class=\\"line\\"><span>  return (BOOL_CONST); </span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span> /*</span></span>\\n<span class=\\"line\\"><span>  *  TYPEID. </span></span>\\n<span class=\\"line\\"><span>  */</span></span>\\n<span class=\\"line\\"><span>[A-Z]{CHAR}*|SELF_TYPE {</span></span>\\n<span class=\\"line\\"><span>  cool_yylval.symbol = idtable.add_string(yytext);</span></span>\\n<span class=\\"line\\"><span>  return (TYPEID);</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span> /*</span></span>\\n<span class=\\"line\\"><span>  *  String constants (C syntax)</span></span>\\n<span class=\\"line\\"><span>  *  Escape sequence \\\\c is accepted for all characters c. Except for </span></span>\\n<span class=\\"line\\"><span>  *  \\\\n \\\\t \\\\b \\\\f, the result is c.</span></span>\\n<span class=\\"line\\"><span>  *</span></span>\\n<span class=\\"line\\"><span>  */</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>\\\\\\"  BEGIN(STR); yymore();</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>&lt;STR&gt;[^\\\\\\\\\\\\\\"\\\\n]*  yymore();</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>&lt;STR&gt;\\\\\\\\[^\\\\n]  yymore();</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>&lt;STR&gt;\\\\\\\\\\\\n {</span></span>\\n<span class=\\"line\\"><span>  curr_lineno++;</span></span>\\n<span class=\\"line\\"><span>  yymore();</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>&lt;STR&gt;&lt;&lt;EOF&gt;&gt; {</span></span>\\n<span class=\\"line\\"><span>  BEGIN(INITIAL);</span></span>\\n<span class=\\"line\\"><span>  yylval.error_msg = \\"EOF in string constant\\";</span></span>\\n<span class=\\"line\\"><span>  /* flushes the scanner’s internal buffer so that the next time the scanner attempts to match a token,</span></span>\\n<span class=\\"line\\"><span>   it will first refill the buffer using YY_INPUT(). Or use yyrestart(yyin); */</span></span>\\n<span class=\\"line\\"><span>  YY_FLUSH_BUFFER;</span></span>\\n<span class=\\"line\\"><span>  return (ERROR); </span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>&lt;STR&gt;\\\\n {</span></span>\\n<span class=\\"line\\"><span>  BEGIN(INITIAL);</span></span>\\n<span class=\\"line\\"><span>  yylval.error_msg = \\"Unterminated string constant\\";</span></span>\\n<span class=\\"line\\"><span>  curr_lineno++;</span></span>\\n<span class=\\"line\\"><span>  return (ERROR); </span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>&lt;STR&gt;\\\\\\" {</span></span>\\n<span class=\\"line\\"><span>  std::string input(yytext, yyleng);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>  // remove the '\\\\\\"'s on both sides.</span></span>\\n<span class=\\"line\\"><span>  input = input.substr(1, input.length() - 2);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>  std::string output = \\"\\";</span></span>\\n<span class=\\"line\\"><span>  std::string::size_type pos;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>  if (input.find_first_of('\\\\0') != std::string::npos) {</span></span>\\n<span class=\\"line\\"><span>    yylval.error_msg = \\"String contains null character\\";</span></span>\\n<span class=\\"line\\"><span>    BEGIN 0;</span></span>\\n<span class=\\"line\\"><span>    return ERROR;</span></span>\\n<span class=\\"line\\"><span>  }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>  while ((pos = input.find_first_of(\\"\\\\\\\\\\")) != std::string::npos) {</span></span>\\n<span class=\\"line\\"><span>    output += input.substr(0, pos);</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    switch (input[pos + 1]) {</span></span>\\n<span class=\\"line\\"><span>      case 'b':</span></span>\\n<span class=\\"line\\"><span>        output += \\"\\\\b\\";</span></span>\\n<span class=\\"line\\"><span>        break;</span></span>\\n<span class=\\"line\\"><span>      case 't':</span></span>\\n<span class=\\"line\\"><span>        output += \\"\\\\t\\";</span></span>\\n<span class=\\"line\\"><span>        break;</span></span>\\n<span class=\\"line\\"><span>      case 'n':</span></span>\\n<span class=\\"line\\"><span>        output += \\"\\\\n\\";</span></span>\\n<span class=\\"line\\"><span>        break;</span></span>\\n<span class=\\"line\\"><span>      case 'f':</span></span>\\n<span class=\\"line\\"><span>        output += \\"\\\\f\\";</span></span>\\n<span class=\\"line\\"><span>        break;</span></span>\\n<span class=\\"line\\"><span>      default:</span></span>\\n<span class=\\"line\\"><span>        output += input[pos + 1];</span></span>\\n<span class=\\"line\\"><span>        break;</span></span>\\n<span class=\\"line\\"><span>    }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>    input = input.substr(pos + 2, input.length() - 2);</span></span>\\n<span class=\\"line\\"><span>  }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>  output += input;</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>  if (output.length() &gt; MAX_STR_CONST - 1) {</span></span>\\n<span class=\\"line\\"><span>    BEGIN (INITIAL);</span></span>\\n<span class=\\"line\\"><span>    yylval.error_msg = \\"String constant too long\\";</span></span>\\n<span class=\\"line\\"><span>    return ERROR;</span></span>\\n<span class=\\"line\\"><span>  }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>  yylval.symbol = stringtable.add_string((char*)output.c_str());</span></span>\\n<span class=\\"line\\"><span>  BEGIN (INITIAL);</span></span>\\n<span class=\\"line\\"><span>  return (STR_CONST);</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span> /*</span></span>\\n<span class=\\"line\\"><span>  *  OBJECTID. </span></span>\\n<span class=\\"line\\"><span>  */</span></span>\\n<span class=\\"line\\"><span>[a-z]{CHAR}* {</span></span>\\n<span class=\\"line\\"><span>  yylval.symbol = idtable.add_string(yytext);</span></span>\\n<span class=\\"line\\"><span>  return (OBJECTID);</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>\\\\n  curr_lineno++;</span></span>\\n<span class=\\"line\\"><span>\\\\0 {</span></span>\\n<span class=\\"line\\"><span>  BEGIN(INITIAL);</span></span>\\n<span class=\\"line\\"><span>  yylval.error_msg = \\"Code contains null character\\";</span></span>\\n<span class=\\"line\\"><span>  return (ERROR);</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span>[ \\\\t\\\\f\\\\r\\\\v]+ {}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span> /* There are some unprintable characters, so must list all allowed characters. */</span></span>\\n<span class=\\"line\\"><span>[+/\\\\-*=&lt;\\\\.~,;:()@{}] { return yytext[0]; }</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span> /* Invalid char.  */</span></span>\\n<span class=\\"line\\"><span>. {</span></span>\\n<span class=\\"line\\"><span>  cool_yylval.error_msg = yytext;</span></span>\\n<span class=\\"line\\"><span>  return (ERROR);</span></span>\\n<span class=\\"line\\"><span>}</span></span>\\n<span class=\\"line\\"><span></span></span>\\n<span class=\\"line\\"><span>%%</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{r as comp,u as data};
