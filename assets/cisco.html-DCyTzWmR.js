import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,d as a,o as n}from"./app-Cc-V_zzY.js";const l="/blog/assets/posts/cisco-Refs/1.png",t="/blog/assets/posts/cisco-Refs/2.png",p="/blog/assets/posts/cisco-Refs/3.png",c="/blog/assets/posts/cisco-Refs/4.png",o="/blog/assets/posts/cisco-Refs/5.png",r="/blog/assets/posts/cisco-Refs/6.png",d="/blog/assets/posts/cisco-Refs/7.png",h="/blog/assets/posts/cisco-Refs/8.png",u="/blog/assets/posts/cisco-Refs/9.png",g="/blog/assets/posts/cisco-Refs/10.png",b="/blog/assets/posts/cisco-Refs/11.png",v="/blog/assets/posts/cisco-Refs/12.png",m="/blog/assets/posts/cisco-Refs/13.png",f="/blog/assets/posts/cisco-Refs/14.png",P="/blog/assets/posts/cisco-Refs/15.png",_="/blog/assets/posts/cisco-Refs/16.png",k="/blog/assets/posts/cisco-Refs/17.png",R="/blog/assets/posts/cisco-Refs/18.png",y="/blog/assets/posts/cisco-Refs/19.png",x="/blog/assets/posts/cisco-Refs/20.png",S="/blog/assets/posts/cisco-Refs/21.png",A="/blog/assets/posts/cisco-Refs/22.png",C="/blog/assets/posts/cisco-Refs/23.png",I="/blog/assets/posts/cisco-Refs/24.png",F="/blog/assets/posts/cisco-Refs/25.png",N="/blog/assets/posts/cisco-Refs/26.png",T="/blog/assets/posts/cisco-Refs/27.png",w="/blog/assets/posts/cisco-Refs/28.png",L="/blog/assets/posts/cisco-Refs/29.png",E={};function D(O,s){return n(),e("div",null,s[0]||(s[0]=[a('<h1 id="cisco-实践" tabindex="-1"><a class="header-anchor" href="#cisco-实践"><span>Cisco 实践</span></a></h1><p>内容取自<strong>湖南科技大学计网慕课</strong></p><h3 id="实验一-认识-packet-tracer" tabindex="-1"><a class="header-anchor" href="#实验一-认识-packet-tracer"><span>实验一 认识 Packet Tracer</span></a></h3><h4 id="_1-2-packet-tracer-简单使用" tabindex="-1"><a class="header-anchor" href="#_1-2-packet-tracer-简单使用"><span>1.2 packet tracer 简单使用</span></a></h4><h5 id="_1-2-2-构建网络拓扑" tabindex="-1"><a class="header-anchor" href="#_1-2-2-构建网络拓扑"><span>1.2.2 构建网络拓扑</span></a></h5><p>利用设备若干搭建拓扑</p><figure><img src="'+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h5 id="_1-2-3-进行网络测试" tabindex="-1"><a class="header-anchor" href="#_1-2-3-进行网络测试"><span>1.2.3 进行网络测试</span></a></h5><ul><li><code>ping</code></li><li><code>tracert</code></li></ul><h5 id="_1-2-5-查看相关网络设备信息" tabindex="-1"><a class="header-anchor" href="#_1-2-5-查看相关网络设备信息"><span>1.2.5 查看相关网络设备信息</span></a></h5><ul><li><code>arp -a</code> 查看 PC0 的 arp 缓存表</li><li>点击 查看按钮 再次点击 switch0 查看相关信息 或者 <code>show mac-address-table</code></li><li><code>show ip route</code></li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Router#show ip route</span></span>
<span class="line"><span>Codes: L - local, C - connected, S - static, R - RIP, M - mobile, B - BGP</span></span>
<span class="line"><span>       D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area</span></span>
<span class="line"><span>       N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2</span></span>
<span class="line"><span>       E1 - OSPF external type 1, E2 - OSPF external type 2, E - EGP</span></span>
<span class="line"><span>       i - IS-IS, L1 - IS-IS level-1, L2 - IS-IS level-2, ia - IS-IS inter area</span></span>
<span class="line"><span>       * - candidate default, U - per-user static route, o - ODR</span></span>
<span class="line"><span>       P - periodic downloaded static route</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Gateway of last resort is not set</span></span>
<span class="line"><span></span></span>
<span class="line"><span>     10.0.0.0/8 is variably subnetted, 2 subnets, 2 masks</span></span>
<span class="line"><span>C       10.0.0.0/30 is directly connected, Serial1/0</span></span>
<span class="line"><span>L       10.0.0.1/32 is directly connected, Serial1/0</span></span>
<span class="line"><span>     192.168.0.0/24 is variably subnetted, 2 subnets, 2 masks</span></span>
<span class="line"><span>C       192.168.0.0/24 is directly connected, FastEthernet0/0</span></span>
<span class="line"><span>L       192.168.0.254/32 is directly connected, FastEthernet0/0</span></span>
<span class="line"><span>S    192.168.1.0/24 [1/0] via 10.0.0.2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>L 表示了路由器的两个端口的 ip</li></ul><h5 id="_1-2-6-单步模拟和协议过滤" tabindex="-1"><a class="header-anchor" href="#_1-2-6-单步模拟和协议过滤"><span>1.2.6 单步模拟和协议过滤</span></a></h5><p>可以很好地看到每个包在每个协议层的解析过程</p><h4 id="_1-3-ios-命令行模式" tabindex="-1"><a class="header-anchor" href="#_1-3-ios-命令行模式"><span>1.3 IOS 命令行模式</span></a></h4><figure><img src="`+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>输入 ？可显示相关模式下的所有命令</li><li>tab 可以自动补全</li><li>简写命令 <code>en</code> <code>conf t</code></li><li>no + 命令可以取消原先的命令</li></ul><h3 id="实验二-物理层相关实验" tabindex="-1"><a class="header-anchor" href="#实验二-物理层相关实验"><span>实验二 物理层相关实验</span></a></h3><ul><li>同种类型的网络设备互联使用交叉双绞线</li><li>不同网络设备互联使用直连双绞线</li></ul><h3 id="实验三-数据链路层相关实验" tabindex="-1"><a class="header-anchor" href="#实验三-数据链路层相关实验"><span>实验三 数据链路层相关实验</span></a></h3><h4 id="_3-1-点对点协议-ppp" tabindex="-1"><a class="header-anchor" href="#_3-1-点对点协议-ppp"><span>3.1 点对点协议 PPP</span></a></h4><ul><li><code>enca... ppp</code> 配置串口 Serial1/0 使用 ppp 协议</li><li><code>show interfaces Serial1/0</code> 确认</li><li>ppp 协议只要配置即可互联 <ul><li>配置带有 CHAP 认证的 ppp</li><li><code>hostname Router0</code> 全局配置路由器名称随后进入端口配置</li><li><code>ppp authentication chap</code></li><li><code>username Router1 password 123456</code> 记录对方的名称和密码</li></ul></li></ul><h4 id="_3-2-使用集线器构建共享式网络拓扑" tabindex="-1"><a class="header-anchor" href="#_3-2-使用集线器构建共享式网络拓扑"><span>3.2 使用集线器构建共享式网络拓扑</span></a></h4><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>监视 ICMP 协议</li><li>PC0 向 PC1 发送数据</li></ul><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>由于集线器只工作在物理层，其会对所有到来的数据进行广播（不论是单播还是广播）</li><li>PC2 收到后知道该数据不是给自己的是，于是丢弃</li><li>当 PC1 发送响应数据时，数据仍会到达 PC2 一次</li><li><strong>碰撞</strong><ul><li>让 PC1 和 PC2 同时向 PC0 发送一个PDU<br><img src="'+o+`" alt="" loading="lazy"></li><li>发生碰撞，集线器广播该数据，所有主机都会丢弃之</li></ul></li></ul><h4 id="_3-3-使用交换机构建交换式以太网" tabindex="-1"><a class="header-anchor" href="#_3-3-使用交换机构建交换式以太网"><span>3.3 使用交换机构建交换式以太网</span></a></h4><ul><li>交换机可以<strong>自学习</strong>地进行单播</li><li>交换机不会发生碰撞，可以看到其依次发送以太网帧</li><li>其工作在数据链路层，能够根据 MAC 地址<strong>查表转发</strong></li></ul><h4 id="_3-4-交换机自学习和转发帧的过程" tabindex="-1"><a class="header-anchor" href="#_3-4-交换机自学习和转发帧的过程"><span>3.4 交换机自学习和转发帧的过程</span></a></h4><ul><li>来回 ping 几次后交换机自学习到了 每个端口连接的 MAC 地址</li><li>可以看到一个 Port 可以对应多个 MAC 地址</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Switch#show mac-address-table </span></span>
<span class="line"><span>          Mac Address Table</span></span>
<span class="line"><span>-------------------------------------------</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Vlan    Mac Address       Type        Ports</span></span>
<span class="line"><span>----    -----------       --------    -----</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   1    0001.438d.b5d2    DYNAMIC     Fa0/2</span></span>
<span class="line"><span>   1    0002.1676.9b6d    DYNAMIC     Fa0/1</span></span>
<span class="line"><span>   1    0060.2fb0.5782    DYNAMIC     Fa0/3</span></span>
<span class="line"><span>   1    0060.5c8e.817d    DYNAMIC     Fa0/3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>清空后，观察交换机自学习的过程<br><img src="`+r+'" alt="" loading="lazy"><ul><li>可以看到当交换机转发表中没有 PC2 的 MAC 地址时，其会进行广播，随后其收到 PC2 的响应后就将其记录到转发表中</li></ul></li></ul><h4 id="_3-5-以太网扩展" tabindex="-1"><a class="header-anchor" href="#_3-5-以太网扩展"><span>3.5 以太网扩展</span></a></h4><ul><li>实验目的 <ul><li>掌握集线器在物理层扩展以太网的方法</li><li>掌握交换机在数据链路层扩展以太网的方法</li><li>验证集线器不隔离<strong>碰撞域</strong> 和 <strong>广播域</strong></li><li>交换机隔离<strong>碰撞域</strong> 不隔离<strong>广播域</strong><br><img src="'+d+'" alt="" loading="lazy"></li></ul></li><li>当无 Hub1 时，左右两侧各是独立的<strong>碰撞域</strong> 和 <strong>广播域</strong>；有了 Hub1 则组合成了更大的<strong>碰撞域</strong> 和 <strong>广播域</strong><ul><li>当 PC1 和 PC2 同时向 PC0发送请求时，碰撞产生的结果会传遍整个网络</li><li>当 PC0 广播时，发生灾难，因为在响应的时候全部发生碰撞</li></ul></li><li>将 Hub1 换成 交换机 <ul><li>碰撞后被隔离（碰撞产生的帧会被交换机丢弃），也就是说交换机隔离了两个域</li><li>广播域仍然没有隔离，形成了更大的广播域</li></ul></li></ul><h4 id="_3-6-交换机生成树协议-stp" tabindex="-1"><a class="header-anchor" href="#_3-6-交换机生成树协议-stp"><span>3.6 交换机生成树协议 STP</span></a></h4><ul><li>实验目的 <ul><li>验证冗余链路与 STP 配合可以<strong>提高以太网可靠性</strong>，<strong>消除网络环路</strong></li><li>验证<strong>广播帧会在网络中永久兜圈并充斥整个网路</strong>，浪费资源<br><img src="'+h+'" alt="" loading="lazy"></li></ul></li><li>可以看到检测到了冗余链路，Switch0 阻塞了自己的 Fa0/2 来保证没有环路</li><li>我们删除 Switch1 到 Switch2 间的线 <ul><li>当交换机检测到网络拓扑发生变化时，会用 STP 重新生成一个连通整个网络不存在环路的生成树</li><li>Fa0/2 端口重新启动</li></ul></li><li>禁用 STP <ul><li><code>no spanning-tree vlan 1</code></li><li>此时模拟广播，广播会永久循环，此时 ping 不通其余机器，因为网络资源都被浪费了</li></ul></li></ul><h4 id="_3-7-划分虚拟局域网vlan" tabindex="-1"><a class="header-anchor" href="#_3-7-划分虚拟局域网vlan"><span>3.7 划分虚拟局域网VLAN</span></a></h4><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><code>show interfaces status</code></li></ul><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>创建 VLAN 可以划分广播域 <ul><li><code>conf t</code></li><li><code>vlan 10</code> 创建VLAN号为10的 VLAN</li><li><code>name VLAN10</code> 命令为 VLAN10</li><li><code>end</code></li><li>同样创建 VLAN20</li><li><code>show vlan brief</code></li></ul></li><li>划分VLAN <ul><li><code>conf t</code></li><li><code>interface range FastEthernet0/1-2</code> 批量模式</li><li><code>switchport mode access</code></li><li><code>switchport access vlan 10</code></li><li>按此配置成图片样式即可</li></ul></li><li>可以发现不同 VLAN 下的不能 ping 通 <ul><li>因此划分成独立的广播域</li></ul></li></ul><h3 id="实验四-网络层相关实验" tabindex="-1"><a class="header-anchor" href="#实验四-网络层相关实验"><span>实验四 网络层相关实验</span></a></h3><h4 id="_4-1-arp-基本工作原理" tabindex="-1"><a class="header-anchor" href="#_4-1-arp-基本工作原理"><span>4.1 ARP 基本工作原理</span></a></h4><ul><li>实验目的 <ul><li>掌握 ARP 工作原理</li><li>验证 ARP 请求报文被封装在 <strong>广播帧</strong> 中被发送</li><li>验证 ARP 响应报文被封装在 <strong>单播帧</strong> 中被发送</li></ul></li><li>观察即可，因为不知道 MAC 所以只能广播</li><li>当 IP 匹配上后，响应报文进行单播</li></ul><h4 id="_4-2-arp-不能夸网络使用" tabindex="-1"><a class="header-anchor" href="#_4-2-arp-不能夸网络使用"><span>4.2 ARP 不能夸网络使用</span></a></h4><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>PC0 ping PC1 <ul><li>不是一个网络，走默认网关</li><li>路由器收到后查表转发，但此时路由器不知道 PC1 的 MAC 地址（ARP 表没查到）</li><li>于是将请求丢弃并进行 ARP</li><li>获得地址后下一次 ping 就能 ping 通了</li><li>所以 ping 的第一次会失败</li></ul></li><li>路由器 <code>show arp</code></li></ul><h4 id="_4-3-ipv4地址分类编址" tabindex="-1"><a class="header-anchor" href="#_4-3-ipv4地址分类编址"><span>4.3 IPv4地址分类编址</span></a></h4><ul><li>实验目的 <ul><li>熟悉标题</li><li>验证不同网络中的计算机不能直接通信</li></ul></li></ul><figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_4-4-ipv4-划分子网编址方法" tabindex="-1"><a class="header-anchor" href="#_4-4-ipv4-划分子网编址方法"><span>4.4 IPv4 划分子网编址方法</span></a></h4><ul><li>实验目的 <ul><li>熟悉标题</li><li>验证不同网络间的计算机需通过<strong>路由器</strong>进行通信<br><img src="'+m+'" alt="" loading="lazy"></li></ul></li><li>将一个 C 类网均分，即占用第 25 位</li><li>每个子网第一个地址为网络地址，最后一个地址为广播地址，不能被使用</li><li>将路由器换成交换机则两边不能通信 <ul><li>当 PC0 ping PC2 的 IP 时，如果发现不在一个子网且没有默认网关，就会将其丢弃</li><li>可是换成交换机就没有默认网关</li><li>证明成功</li></ul></li></ul><h4 id="_4-5-ipv4-无分类编址方法" tabindex="-1"><a class="header-anchor" href="#_4-5-ipv4-无分类编址方法"><span>4.5 IPv4 无分类编址方法</span></a></h4><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>申请到的 CIDR 地址为 218.75.230.0/24</li><li>根据主机数量进行划分</li></ul><h4 id="_4-6-默认路由和特定主机路由的配置" tabindex="-1"><a class="header-anchor" href="#_4-6-默认路由和特定主机路由的配置"><span>4.6 默认路由和特定主机路由的配置</span></a></h4><figure><img src="'+P+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>特定路由 给 router0 配置 <code>ip route 192.168.16.197 255.255.255.255 192.168.16.194</code></li><li>默认路由 给 router1 配置 <code>ip route 0.0.0.0 0.0.0.0 192.168.16.193</code></li></ul><h4 id="_4-7-路由环路问题" tabindex="-1"><a class="header-anchor" href="#_4-7-路由环路问题"><span>4.7 路由环路问题</span></a></h4><ul><li>实验目的 <ul><li>理解 TTL 的作用</li><li>验证静态路由配置错误可能导致路由环路<br><img src="'+_+'" alt="" loading="lazy"></li></ul></li><li>我们将 Router1 的静态路由故意配置错误，使 Router0 和 Router1 形成环路</li><li>模拟一个数据报的发送，观察包 发现 TTL 减少了</li></ul><h4 id="_4-8-验证路由器即隔离广播域也隔离碰撞域" tabindex="-1"><a class="header-anchor" href="#_4-8-验证路由器即隔离广播域也隔离碰撞域"><span>4.8 验证路由器即隔离广播域也隔离碰撞域</span></a></h4><ul><li>PASS，显然路由器不会将其进行传播</li></ul><h4 id="_4-9-验证路由信息协议-ripv1" tabindex="-1"><a class="header-anchor" href="#_4-9-验证路由信息协议-ripv1"><span>4.9 验证路由信息协议 RIPv1</span></a></h4><ul><li>实验目的 <ul><li>掌握 RIPv1 的特点</li><li>RIPv1 是基于距离向量的，它认为<strong>好的路由是 RIP 距离最短的路由</strong></li><li>验证其等价均衡负载</li></ul></li></ul><figure><img src="'+k+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>开启RIP <ul><li><code>conf t</code></li><li><code>router rip</code></li><li><code>network 192.168.0.0</code> 通知路由器自己的直连网络</li><li>...</li></ul></li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Router#show ip route</span></span>
<span class="line"><span>Codes: L - local, C - connected, S - static, R - RIP, M - mobile, B - BGP</span></span>
<span class="line"><span>       D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area</span></span>
<span class="line"><span>       N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2</span></span>
<span class="line"><span>       E1 - OSPF external type 1, E2 - OSPF external type 2, E - EGP</span></span>
<span class="line"><span>       i - IS-IS, L1 - IS-IS level-1, L2 - IS-IS level-2, ia - IS-IS inter area</span></span>
<span class="line"><span>       * - candidate default, U - per-user static route, o - ODR</span></span>
<span class="line"><span>       P - periodic downloaded static route</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Gateway of last resort is not set</span></span>
<span class="line"><span></span></span>
<span class="line"><span>     10.0.0.0/8 is variably subnetted, 2 subnets, 2 masks</span></span>
<span class="line"><span>C       10.0.0.0/8 is directly connected, GigabitEthernet0/1</span></span>
<span class="line"><span>L       10.0.0.1/32 is directly connected, GigabitEthernet0/1</span></span>
<span class="line"><span>R    20.0.0.0/8 [120/1] via 30.0.0.2, 00:00:02, Serial0/3/0</span></span>
<span class="line"><span>                [120/1] via 10.0.0.2, 00:00:26, GigabitEthernet0/1</span></span>
<span class="line"><span>     30.0.0.0/8 is variably subnetted, 2 subnets, 2 masks</span></span>
<span class="line"><span>C       30.0.0.0/8 is directly connected, Serial0/3/0</span></span>
<span class="line"><span>L       30.0.0.1/32 is directly connected, Serial0/3/0</span></span>
<span class="line"><span>     192.168.0.0/24 is variably subnetted, 2 subnets, 2 masks</span></span>
<span class="line"><span>C       192.168.0.0/24 is directly connected, GigabitEthernet0/0</span></span>
<span class="line"><span>L       192.168.0.254/32 is directly connected, GigabitEthernet0/0</span></span>
<span class="line"><span>R    192.168.1.0/24 [120/1] via 30.0.0.2, 00:00:02, Serial0/3/0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>[120/1] 中的 120 指的是 RIP，1 指的是 RIP 距离</li><li>ping 的时候，其会走 Router0 到 Router1，尽管其是用一条低速的串行链路连接的，证明是<strong>实验目的2</strong></li><li>用 Router1 ping Router0的 30.0.0.1，可证明<strong>实验目的3</strong></li><li><code>debug ip rip</code><ul><li>可以看到 RIP 路由表的动态更新</li></ul></li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Router#debug ip rip</span></span>
<span class="line"><span>RIP protocol debugging is on</span></span>
<span class="line"><span>Router#RIP: received v1 update from 30.0.0.2 on Serial0/3/0</span></span>
<span class="line"><span>      20.0.0.0 in 1 hops</span></span>
<span class="line"><span>      192.168.1.0 in 1 hops</span></span>
<span class="line"><span>RIP: sending  v1 update to 255.255.255.255 via GigabitEthernet0/0 (192.168.0.254)</span></span>
<span class="line"><span>RIP: build update entries</span></span>
<span class="line"><span>      network 10.0.0.0 metric 1</span></span>
<span class="line"><span>      network 20.0.0.0 metric 2</span></span>
<span class="line"><span>      network 30.0.0.0 metric 1</span></span>
<span class="line"><span>      network 192.168.1.0 metric 2</span></span>
<span class="line"><span>RIP: sending  v1 update to 255.255.255.255 via GigabitEthernet0/1 (10.0.0.1)</span></span>
<span class="line"><span>RIP: build update entries</span></span>
<span class="line"><span>      network 30.0.0.0 metric 1</span></span>
<span class="line"><span>      network 192.168.0.0 metric 1</span></span>
<span class="line"><span>      network 192.168.1.0 metric 2</span></span>
<span class="line"><span>RIP: sending  v1 update to 255.255.255.255 via Serial0/3/0 (30.0.0.1)</span></span>
<span class="line"><span>RIP: build update entries</span></span>
<span class="line"><span>      network 10.0.0.0 metric 1</span></span>
<span class="line"><span>      network 192.168.0.0 metric 1</span></span>
<span class="line"><span>RIP: received v1 update from 10.0.0.2 on GigabitEthernet0/1</span></span>
<span class="line"><span>      20.0.0.0 in 1 hops</span></span>
<span class="line"><span>      192.168.1.0 in 2 hops</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-10-ripv2-与-ripv1-的对比" tabindex="-1"><a class="header-anchor" href="#_4-10-ripv2-与-ripv1-的对比"><span>4.10 RIPv2 与 RIPv1 的对比</span></a></h4><ul><li>实验目的 <ul><li>验证 RIPv1 是有类路由，v2 是无类路由</li><li>v1 广播发送更新报文，v2 组播</li></ul></li></ul><h4 id="_4-11-验证-开放最短路径优先ospf协议" tabindex="-1"><a class="header-anchor" href="#_4-11-验证-开放最短路径优先ospf协议"><span>4.11 验证 开放最短路径优先OSPF协议</span></a></h4><ul><li>实验目的 <ul><li>掌握其特点和配置</li><li>验证其是基于<strong>链路状态</strong>的，它认为<strong>好的路由是路径代价最少的路由</strong></li><li>验证其是<strong>等价负载均衡</strong></li></ul></li></ul><figure><img src="`+R+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>开启 OSPF <ul><li><code>router ospf 100</code> 开启 PID 100 的 OSPF</li><li><code>network 192.168.16.0 0.0.0.127 area 0</code> 通知路由器直连网络，area 表示区域标识</li><li>...</li></ul></li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Router#show ip route</span></span>
<span class="line"><span>Codes: L - local, C - connected, S - static, R - RIP, M - mobile, B - BGP</span></span>
<span class="line"><span>       D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area</span></span>
<span class="line"><span>       N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2</span></span>
<span class="line"><span>       E1 - OSPF external type 1, E2 - OSPF external type 2, E - EGP</span></span>
<span class="line"><span>       i - IS-IS, L1 - IS-IS level-1, L2 - IS-IS level-2, ia - IS-IS inter area</span></span>
<span class="line"><span>       * - candidate default, U - per-user static route, o - ODR</span></span>
<span class="line"><span>       P - periodic downloaded static route</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Gateway of last resort is not set</span></span>
<span class="line"><span></span></span>
<span class="line"><span>     10.0.0.0/8 is variably subnetted, 2 subnets, 2 masks</span></span>
<span class="line"><span>C       10.0.0.0/30 is directly connected, GigabitEthernet0/1</span></span>
<span class="line"><span>L       10.0.0.1/32 is directly connected, GigabitEthernet0/1</span></span>
<span class="line"><span>     20.0.0.0/30 is subnetted, 1 subnets</span></span>
<span class="line"><span>O       20.0.0.0/30 [110/2] via 10.0.0.2, 00:00:27, GigabitEthernet0/1</span></span>
<span class="line"><span>     30.0.0.0/8 is variably subnetted, 2 subnets, 2 masks</span></span>
<span class="line"><span>C       30.0.0.0/30 is directly connected, Serial0/3/0</span></span>
<span class="line"><span>L       30.0.0.1/32 is directly connected, Serial0/3/0</span></span>
<span class="line"><span>     192.168.16.0/24 is variably subnetted, 3 subnets, 3 masks</span></span>
<span class="line"><span>C       192.168.16.0/25 is directly connected, GigabitEthernet0/0</span></span>
<span class="line"><span>L       192.168.16.126/32 is directly connected, GigabitEthernet0/0</span></span>
<span class="line"><span>O       192.168.16.128/26 [110/3] via 10.0.0.2, 00:00:27, GigabitEthernet0/1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Cisco 中，计算 OSPF 代价的方法是：100Mb/s 除以链路带宽</li></ul><figure><img src="`+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>故可以看到上面的路由表中，其不会走串行线</li><li>在 Router2 中 ping 30.0.0.2 可验证负载均衡</li><li><code>debug ip ospf events</code></li></ul><h4 id="_4-12-验证-ospf-可以划分区域" tabindex="-1"><a class="header-anchor" href="#_4-12-验证-ospf-可以划分区域"><span>4.12 验证 OSPF 可以划分区域</span></a></h4><h4 id="_4-13-验证边界网关协议-bgp" tabindex="-1"><a class="header-anchor" href="#_4-13-验证边界网关协议-bgp"><span>4.13 验证边界网关协议 BGP</span></a></h4><h4 id="_4-14-icmp-的应用" tabindex="-1"><a class="header-anchor" href="#_4-14-icmp-的应用"><span>4.14 ICMP 的应用</span></a></h4><figure><img src="'+x+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>模拟一下 ping 和 tracert</li><li>可以看到 tracert 就是发 TTL 从 1 到某个值的 ICMP 报文，然后 TTL 过期就会收到响应报文，从而拿到 ip</li></ul><h4 id="_4-15-网络地址与端口号转换-napt" tabindex="-1"><a class="header-anchor" href="#_4-15-网络地址与端口号转换-napt"><span>4.15 网络地址与端口号转换 NAPT</span></a></h4><ul><li>其是 NAT 的一种扩展，通过<strong>端口号转换</strong>来实现 NAT</li></ul><figure><img src="'+S+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>首先我们给 Router0 配置一个默认路由</li><li>ping 能发送到服务器，但会在 Router1 被丢弃（因为查不到发去哪）</li><li>开启 NAPT <ul><li><code>inter Gig..0/0</code></li><li><code>ip nat inside</code></li><li><code>inter Seri.. ip nat outside</code> <code>exit</code></li><li><code>ip nat pool napt-pool 218.75.230.253 218.75.230.253 netmask 255.255.255.252</code> 指示公有地址池，显然只有一个公有 ip</li><li><code>access-list 1 permit 192.168.0.0 0.0.0.255</code> 构建允许访问列表</li><li><code>ip nat inside source list 1 pool napt-pool overload</code> 将其关联，overload 表示多对一</li></ul></li><li><code>show ip nat translations</code></li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Router#show ip nat translations </span></span>
<span class="line"><span>Pro  Inside global     Inside local       Outside local      Outside global</span></span>
<span class="line"><span>icmp 218.75.230.253:10 192.168.0.2:10     218.75.230.1:10    218.75.230.1:10</span></span>
<span class="line"><span>icmp 218.75.230.253:3  192.168.0.2:3      218.75.230.1:3     218.75.230.1:3</span></span>
<span class="line"><span>icmp 218.75.230.253:4  192.168.0.2:4      218.75.230.1:4     218.75.230.1:4</span></span>
<span class="line"><span>icmp 218.75.230.253:5  192.168.0.2:5      218.75.230.1:5     218.75.230.1:5</span></span>
<span class="line"><span>icmp 218.75.230.253:6  192.168.0.2:6      218.75.230.1:6     218.75.230.1:6</span></span>
<span class="line"><span>icmp 218.75.230.253:7  192.168.0.2:7      218.75.230.1:7     218.75.230.1:7</span></span>
<span class="line"><span>icmp 218.75.230.253:8  192.168.0.2:8      218.75.230.1:8     218.75.230.1:8</span></span>
<span class="line"><span>icmp 218.75.230.253:9  192.168.0.2:9      218.75.230.1:9     218.75.230.1:9</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第二列是ip和虚拟端口号（因为 ICMP 是网络层协议，非重点）</li><li>第二列是转换后的，第三列是转换前的</li></ul><p>观察一下 http 协议</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Router#show ip nat translations </span></span>
<span class="line"><span>Pro  Inside global     Inside local       Outside local      Outside global</span></span>
<span class="line"><span>tcp 218.75.230.253:1025192.168.0.2:1025   218.75.230.1:80    218.75.230.1:80</span></span>
<span class="line"><span>tcp 218.75.230.253:1026192.168.0.2:1026   218.75.230.1:80    218.75.230.1:80</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>可以看到端口号的转换</li><li>事实上，当今的家庭路由器都是 NAPT 转换器，而并不运行路由选择协议</li><li>还可以发送一个 ICMP，在 NAPT 路由器上观察数据报（重点是 IP）</li></ul><h4 id="_4-16-从-ipv4-向-ipv6-过渡所使用的隧道技术" tabindex="-1"><a class="header-anchor" href="#_4-16-从-ipv4-向-ipv6-过渡所使用的隧道技术"><span>4.16 从 IPv4 向 IPv6 过渡所使用的隧道技术</span></a></h4><ul><li>实验目的 <ul><li>掌握在路由器上配置隧道的方法</li><li>验证通过隧道两个IPv6可以通过IPv4通信</li></ul></li><li><code>ipv6 address ...</code> <code>ipv6 enable</code> <code>ipv6 unicast-routing</code></li></ul><figure><img src="`+A+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_4-17-vlan-间单播通信的实现方法-多臂路由" tabindex="-1"><a class="header-anchor" href="#_4-17-vlan-间单播通信的实现方法-多臂路由"><span>4.17 VLAN 间单播通信的实现方法--&quot;多臂路由&quot;</span></a></h4><figure><img src="'+C+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>划分 VLAN 后尽管隔离了广播域，但是不同的 VLAN 间不能通信</li><li>借助 <strong>网络层设备</strong> 实现不同 VLAN 间的通信</li><li>劣势：每增加一个 VLAN 就多占用一个交换机接口和一个路由器接口，多一条线，所以使用很少</li></ul><h4 id="_4-18-vlan-间单播通信的实现方法-单臂路由" tabindex="-1"><a class="header-anchor" href="#_4-18-vlan-间单播通信的实现方法-单臂路由"><span>4.18 VLAN 间单播通信的实现方法--&quot;单臂路由&quot;</span></a></h4><ul><li>创建逻辑子接口</li><li><code>inter Gig..0/0.1</code></li><li><code>encapsulation dolQ 10</code> 配置其可以接收和封装VLAN号为10的802.1Q帧</li><li><code>ip address..</code></li><li>只需要交换机上的一个接口和路由器上的一个局域网接口连接</li></ul><h4 id="_4-19-vlan-间单播通信的实现方法-三层交换机" tabindex="-1"><a class="header-anchor" href="#_4-19-vlan-间单播通信的实现方法-三层交换机"><span>4.19 VLAN 间单播通信的实现方法--三层交换机</span></a></h4><ul><li>路由功能由硬件提供，因此速度更快</li><li><code>interface vlan 10</code> 创建VLAN号为10的交换机虚拟接口</li><li><code>ip address ...</code> 给该接口配置</li><li><code>no shutdown</code> <code>..</code></li><li><code>exit</code> <code>ip routing</code></li></ul><h3 id="第五章-运输层相关实验" tabindex="-1"><a class="header-anchor" href="#第五章-运输层相关实验"><span>第五章 运输层相关实验</span></a></h3><p>PASS</p><h3 id="第六章-应用层相关实验" tabindex="-1"><a class="header-anchor" href="#第六章-应用层相关实验"><span>第六章 应用层相关实验</span></a></h3><h4 id="_6-1-熟悉动态主机配置协议-dhcp" tabindex="-1"><a class="header-anchor" href="#_6-1-熟悉动态主机配置协议-dhcp"><span>6.1 熟悉动态主机配置协议 DHCP</span></a></h4><figure><img src="'+I+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>我们没有静态配置 PC0 和 PC1 的网络信息</li><li>对 Server0 配置 DHCP 服务</li><li>随后我们观察 PC0 进行 DHCP 的过程 <ul><li>首先是 DHCP 发现报文，srcIP 是 0.0.0.0 srcPort 67 destIP 是 255.255.255.255（广播）destPort 68</li><li>被广播后，因为只有 Server 开启了 DHCP 服务，其在相对应的端口有服务，其接收到了 DHCP 发现报文</li><li>回送一个 DHCP offer 报文，表示可以提供网络信息</li><li>随后继续一个来回（此时尽管知道了 DHCP 服务器的 IP，但<strong>仍然进行广播</strong>，因为DHCP 发现报文可能被多个 DHCP 服务器接收，这次的广播可以通知未被选中的 DHCP 服务器将分配的 IP 分配给别的 PC）获得相关网络信息</li></ul></li><li>现在笔记本/手机上无线网基本都是通过此协议获得 IP</li></ul><h4 id="_6-2-配置-dhcp-中继代理" tabindex="-1"><a class="header-anchor" href="#_6-2-配置-dhcp-中继代理"><span>6.2 配置 DHCP 中继代理</span></a></h4><ul><li>路由器隔离广播，所以如果 PC2 和 PC3 也想使用 DHCP，要配置中继代理</li><li>DHCP 中继代理可以转发跨网的 DHCP 请求和响应，因此可以避免每个物理网络中都有一个 DHCP 服务器，当中继代理收到 DHCP 发现报文后，就单独将其转发给 DHCP 服务器 <ul><li><code>inter Gig..0/1</code> <code>ip helper-address 192.168.0.252</code> 指明 DHCP 服务器 IP</li></ul></li></ul><h4 id="_6-3-熟悉-dns-的递归查询" tabindex="-1"><a class="header-anchor" href="#_6-3-熟悉-dns-的递归查询"><span>6.3 熟悉 DNS 的递归查询</span></a></h4><figure><img src="'+F+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>配置 DNS 服务</li></ul><figure><img src="'+N+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>NS 指示了所有查询都走 dns_root</li></ul><h4 id="_6-4-熟悉文件传送协议-ftp" tabindex="-1"><a class="header-anchor" href="#_6-4-熟悉文件传送协议-ftp"><span>6.4 熟悉文件传送协议 FTP</span></a></h4><ul><li>FTP 登陆后即可下载或上传文件</li><li>下载会单独临时创建一条 TCP 连接（与控制命令的 TCP 连接区分）</li><li>事实上，ftp 已经不被浏览器弃用（因为其是<strong>明文传输</strong>） <ul><li>sftp/scp/rsync</li></ul></li></ul><h4 id="_6-5-熟悉电子邮件相关协议" tabindex="-1"><a class="header-anchor" href="#_6-5-熟悉电子邮件相关协议"><span>6.5 熟悉电子邮件相关协议</span></a></h4><h4 id="_6-6-熟悉-http" tabindex="-1"><a class="header-anchor" href="#_6-6-熟悉-http"><span>6.6 熟悉 HTTP</span></a></h4><p>PASS</p><h3 id="第七章-网络安全相关实验" tabindex="-1"><a class="header-anchor" href="#第七章-网络安全相关实验"><span>第七章 网络安全相关实验</span></a></h3><h4 id="_7-1-配置访问控制列表-acl" tabindex="-1"><a class="header-anchor" href="#_7-1-配置访问控制列表-acl"><span>7.1 配置访问控制列表 ACL</span></a></h4><figure><img src="'+T+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li>拒绝部门A网络的计算机访问部门B的Web服务 <ul><li><code>access-list 100 deny tcp 192.168.0.0 0.0.0.255 host 192.168.1.2 eq 80</code></li></ul></li><li>拒绝 PC0 访问 FTP <ul><li><code>access-list 100 deny tcp host 192.168.0.1 host 192.168.1.2 eq 20</code></li><li><code>access-list 100 deny tcp host 192.168.0.1 host 192.168.1.2 eq 21</code></li></ul></li><li>拒绝部门A的PC1与部门B的PC2通信 <ul><li><code>access-list 100 deny ip host 192.168.0.2 host 192.168.1.1</code></li></ul></li><li>拒绝部门A ping Router1 <ul><li><code>access-list 100 deny icmp 192.168.0.0 0.0.0.255 host 10.0.0.2</code></li></ul></li><li><code>access-list 100 permit ip any any</code></li><li><code>inter Gig0/1</code> <code>ip access-group 100 in</code></li><li><code>show access-lists</code></li></ol><h4 id="_7-2-配置基于ipsec的虚拟专用网-vpn" tabindex="-1"><a class="header-anchor" href="#_7-2-配置基于ipsec的虚拟专用网-vpn"><span>7.2 配置基于IPSec的虚拟专用网 VPN</span></a></h4><ul><li>实验目的 <ul><li>掌握在路由器上配置 IPSec 并实现<strong>VPN</strong>的方法</li><li>观察IP数据报经处理后成为IP安全数据报并被传送的过程</li></ul></li></ul><figure><img src="'+w+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>PC0 无法与 PC1 通信，因为 Router1 中没有配置到达 部门A 和 B 的私有网络 entry。这与实际一致，因特网的路由器一般都是运营商配置，对目的地址为私有地址的IP数据报一律不转发</li><li>Router0 <ul><li><code>crypto isakmp enable</code></li><li><code>crypto isakmp policy 1</code></li><li><code>encryption 3des</code> 设置 isakmp 加密方式</li><li><code>hash md5</code> 设置 isakmp 散列算法</li><li><code>authentication pre-share</code> 设置 isakmp 采用的认证方式为预共享密钥</li><li><code>exit</code> <code>crypto isakmp key 123456 address 192.2.2.1</code> 设置交换密钥和对方ip</li><li><code>crypto ipsec transform-set myts ah-md5-hmac esp-3des</code> 创建 IPSec 转换集，myts是名称（可自定义），对方的转换集名称可以不同，但别的要对应。本命令创建的转换集为AH-...转换和使用3des的esp转换</li><li><code>access-list 101 permit ip 192.168.0.0 0.0.0.255 192.168.1.0 0.0.0.255</code></li><li><code>crypto map mymap 10 ipsec-isakmp</code></li><li><code>set peer 192.2.2.1</code> 设置对方路由器</li><li><code>set transform-set myts</code></li><li><code>match address 101</code> 指定控制访问列表</li><li><code>inter Serial1/0</code> <code>crypto map mymap</code> 映射加密表</li></ul></li></ul><h3 id="第八章-综合实验" tabindex="-1"><a class="header-anchor" href="#第八章-综合实验"><span>第八章 综合实验</span></a></h3><h4 id="_8-1-构建采用三层网络架构的小型园区网" tabindex="-1"><a class="header-anchor" href="#_8-1-构建采用三层网络架构的小型园区网"><span>8.1 构建采用三层网络架构的小型园区网</span></a></h4><figure><img src="'+L+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>在三层交换机上开启 DHCP <ul><li><code>ip dhcp excluded-address 192.168.10.254</code></li><li><code>... 20.254</code></li><li><code>inter vlan 10</code> <code>ip add...``ip routing</code> <code>exit</code></li><li><code>ip dhcp pool 10</code></li><li><code>network 192.168.10.0 255.255.255.0</code></li><li><code>default-router 192.168.10.254</code></li><li><code>dns-server 192.168.50.1</code></li><li><code>exit</code></li></ul></li><li>server 0 上配置 dns 服务</li><li>在三层交换机上配置 RIPv2 路由信息协议 <ul><li><code>router rip</code> <code>version 2</code></li><li><code>no auto-summary</code> 关闭自动汇总</li><li>通知直连网络</li></ul></li><li>我们需要关闭某些接口的交换功能（将接口配置为三层接口）并赋予 IP 地址 <ul><li><code>no switchport</code></li><li><code>ip add...</code></li></ul></li><li>给路由器安装 HWIC-2T 串行接口模块，为 Router0 配置 RIPv2 和 IP 和 NAT，ACL</li><li>三层交换机需要额外配置默认路由（起着默认网关的作用） <ul><li><code>ip route 0.0.0.0 0.0.0.0 192.168.3.2</code></li></ul></li></ul>',135)]))}const H=i(E,[["render",D],["__file","cisco.html.vue"]]),M=JSON.parse('{"path":"/posts/backend/network/cisco.html","title":"Cisco 实践","lang":"zh-CN","frontmatter":{"icon":"laptop-code","date":"2025-01-04T00:00:00.000Z","category":["计算机网络"],"tag":["Packet Tracer 仿真"],"footer":"凉了的馒头","description":"Cisco 实践 内容取自湖南科技大学计网慕课 实验一 认识 Packet Tracer 1.2 packet tracer 简单使用 1.2.2 构建网络拓扑 利用设备若干搭建拓扑 1.2.3 进行网络测试 ping tracert 1.2.5 查看相关网络设备信息 arp -a 查看 PC0 的 arp 缓存表 点击 查看按钮 再次点击 switc...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/backend/network/cisco.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"Cisco 实践"}],["meta",{"property":"og:description","content":"Cisco 实践 内容取自湖南科技大学计网慕课 实验一 认识 Packet Tracer 1.2 packet tracer 简单使用 1.2.2 构建网络拓扑 利用设备若干搭建拓扑 1.2.3 进行网络测试 ping tracert 1.2.5 查看相关网络设备信息 arp -a 查看 PC0 的 arp 缓存表 点击 查看按钮 再次点击 switc..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/blog/assets/posts/cisco-Refs/1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-10T03:04:45.000Z"}],["meta",{"property":"article:tag","content":"Packet Tracer 仿真"}],["meta",{"property":"article:published_time","content":"2025-01-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-10T03:04:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Cisco 实践\\",\\"image\\":[\\"https://mister-hope.github.io/blog/assets/posts/cisco-Refs/1.png\\",\\"https://mister-hope.github.io/blog/assets/posts/cisco-Refs/2.png\\",\\"https://mister-hope.github.io/blog/assets/posts/cisco-Refs/3.png\\",\\"https://mister-hope.github.io/blog/assets/posts/cisco-Refs/4.png\\",\\"https://mister-hope.github.io/blog/assets/posts/cisco-Refs/5.png\\",\\"https://mister-hope.github.io/blog/assets/posts/cisco-Refs/6.png\\",\\"https://mister-hope.github.io/blog/assets/posts/cisco-Refs/7.png\\",\\"https://mister-hope.github.io/blog/assets/posts/cisco-Refs/8.png\\",\\"https://mister-hope.github.io/blog/assets/posts/cisco-Refs/9.png\\",\\"https://mister-hope.github.io/blog/assets/posts/cisco-Refs/10.png\\",\\"https://mister-hope.github.io/blog/assets/posts/cisco-Refs/11.png\\",\\"https://mister-hope.github.io/blog/assets/posts/cisco-Refs/12.png\\",\\"https://mister-hope.github.io/blog/assets/posts/cisco-Refs/13.png\\",\\"https://mister-hope.github.io/blog/assets/posts/cisco-Refs/14.png\\",\\"https://mister-hope.github.io/blog/assets/posts/cisco-Refs/15.png\\",\\"https://mister-hope.github.io/blog/assets/posts/cisco-Refs/16.png\\",\\"https://mister-hope.github.io/blog/assets/posts/cisco-Refs/17.png\\",\\"https://mister-hope.github.io/blog/assets/posts/cisco-Refs/18.png\\",\\"https://mister-hope.github.io/blog/assets/posts/cisco-Refs/19.png\\",\\"https://mister-hope.github.io/blog/assets/posts/cisco-Refs/20.png\\",\\"https://mister-hope.github.io/blog/assets/posts/cisco-Refs/21.png\\",\\"https://mister-hope.github.io/blog/assets/posts/cisco-Refs/22.png\\",\\"https://mister-hope.github.io/blog/assets/posts/cisco-Refs/23.png\\",\\"https://mister-hope.github.io/blog/assets/posts/cisco-Refs/24.png\\",\\"https://mister-hope.github.io/blog/assets/posts/cisco-Refs/25.png\\",\\"https://mister-hope.github.io/blog/assets/posts/cisco-Refs/26.png\\",\\"https://mister-hope.github.io/blog/assets/posts/cisco-Refs/27.png\\",\\"https://mister-hope.github.io/blog/assets/posts/cisco-Refs/28.png\\",\\"https://mister-hope.github.io/blog/assets/posts/cisco-Refs/29.png\\"],\\"datePublished\\":\\"2025-01-04T00:00:00.000Z\\",\\"dateModified\\":\\"2025-01-10T03:04:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Tyz\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":3,"title":"实验一 认识 Packet Tracer","slug":"实验一-认识-packet-tracer","link":"#实验一-认识-packet-tracer","children":[]},{"level":3,"title":"实验二 物理层相关实验","slug":"实验二-物理层相关实验","link":"#实验二-物理层相关实验","children":[]},{"level":3,"title":"实验三 数据链路层相关实验","slug":"实验三-数据链路层相关实验","link":"#实验三-数据链路层相关实验","children":[]},{"level":3,"title":"实验四 网络层相关实验","slug":"实验四-网络层相关实验","link":"#实验四-网络层相关实验","children":[]},{"level":3,"title":"第五章 运输层相关实验","slug":"第五章-运输层相关实验","link":"#第五章-运输层相关实验","children":[]},{"level":3,"title":"第六章 应用层相关实验","slug":"第六章-应用层相关实验","link":"#第六章-应用层相关实验","children":[]},{"level":3,"title":"第七章 网络安全相关实验","slug":"第七章-网络安全相关实验","link":"#第七章-网络安全相关实验","children":[]},{"level":3,"title":"第八章 综合实验","slug":"第八章-综合实验","link":"#第八章-综合实验","children":[]}],"git":{"createdTime":1736478285000,"updatedTime":1736478285000,"contributors":[{"name":"BUAA-TYZ","username":"BUAA-TYZ","email":"2506741037@qq.com","commits":1,"url":"https://github.com/BUAA-TYZ"}]},"readingTime":{"minutes":15.36,"words":4607},"filePathRelative":"posts/backend/network/cisco.md","localizedDate":"2025年1月4日","excerpt":"\\n<p>内容取自<strong>湖南科技大学计网慕课</strong></p>\\n<h3>实验一 认识 Packet Tracer</h3>\\n<h4>1.2 packet tracer 简单使用</h4>\\n<h5>1.2.2 构建网络拓扑</h5>\\n<p>利用设备若干搭建拓扑</p>\\n<figure><img src=\\"/assets/posts/cisco-Refs/1.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n<h5>1.2.3 进行网络测试</h5>\\n<ul>\\n<li><code>ping</code></li>\\n<li><code>tracert</code></li>\\n</ul>","autoDesc":true}');export{H as comp,M as data};
