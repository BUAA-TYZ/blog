import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,e as i,o as a}from"./app-BbGf8pLO.js";const p="/blog/assets/posts/CMU15445-Refs/p3/1.png",o="/blog/assets/posts/CMU15445-Refs/p3/2.png",n="/blog/assets/posts/CMU15445-Refs/p3/3.png",l="/blog/assets/posts/CMU15445-Refs/p3/4.png",r="/blog/assets/posts/CMU15445-Refs/p3/5.png",g="/blog/assets/posts/CMU15445-Refs/p3/6.png",h="/blog/assets/posts/CMU15445-Refs/p3/7.png",c="/blog/assets/posts/CMU15445-Refs/p3/8.png",d="/blog/assets/posts/CMU15445-Refs/p3/9.png",u="/blog/assets/posts/CMU15445-Refs/p3/10.png",k="/blog/assets/posts/CMU15445-Refs/p3/11.png",m="/blog/assets/posts/CMU15445-Refs/p3/12.png",b="/blog/assets/posts/CMU15445-Refs/p3/13.png",f="/blog/assets/posts/CMU15445-Refs/p3/14.png",x="/blog/assets/posts/CMU15445-Refs/p3/15.png",y="/blog/assets/posts/CMU15445-Refs/p3/16.png",_="/blog/assets/posts/CMU15445-Refs/p3/17.png",A="/blog/assets/posts/CMU15445-Refs/p3/18.png",C="/blog/assets/posts/CMU15445-Refs/p3/19.png",B="/blog/assets/posts/CMU15445-Refs/p3/20.png",M="/blog/assets/posts/CMU15445-Refs/p3/21.png",v="/blog/assets/posts/CMU15445-Refs/p3/22.png",E="/blog/assets/posts/CMU15445-Refs/p3/23.png",T={};function F(R,e){return a(),t("div",null,e[0]||(e[0]=[i('<h1 id="cmu15445-spring-2023-project-3-query-execution" tabindex="-1"><a class="header-anchor" href="#cmu15445-spring-2023-project-3-query-execution"><span>CMU15445 (Spring 2023) Project #3 - Query Execution</span></a></h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>这次的 Project 要求我们实现几个简单的 Executor ，写完这个 Project 我们就可以在 bustub-shell 中检验自己的成果了。</p><p><a href="https://15445.courses.cs.cmu.edu/spring2023/project3/" target="_blank" rel="noopener noreferrer">官方文档</a></p><p>这个项目要求阅读不少的代码，所以本文还会穿插介绍一些 Clion 的快捷键。</p><p><strong>2023.08.25</strong> 将与项目无关的知识单独整理到最后</p><p><strong>2023.09.08</strong> 完成所有优化</p><h2 id="理解" tabindex="-1"><a class="header-anchor" href="#理解"><span>理解</span></a></h2><p>我们首先要从宏观上认识这一整个项目</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们说 SQL 是一种语言，它将一系列数据库的底层操作抽象成我们能理解的东西。那么正如 C 语言要经过 预编译-&gt;编译-&gt;汇编-&gt;链接 这四个阶段，SQL 语言也要经过一个类似的过程。</p><p>如图，一条写出的 SQL 语句，首先经过 <strong>PARSER</strong> 生成 AST 抽象语法树，再由 <strong>BINDER</strong> 将 AST 上的每个节点与一个数据库实体绑定，随后 <strong>PLANNER</strong> 生成一个初步的查询计划，<strong>OPTIMIZER</strong> 对初步的查询计划进行优化，使其成本更低，最后这个计划被送入一堆 <strong>Executors</strong> 中进行执行。</p><p>或许有些抽象，我们可以看一个例子：</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们可以清晰的看到每个阶段完成了什么，比如：<strong>PLANNER</strong> 生成的初步计划使用的是效率最低的 NestedLoopJoin (NLJ)，经过优化后计划变为了效率更高的 HashJoin。最终生成的计划如下：</p><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>图中的每一个圆都对应了一个 Executor</p><p>而对于每个 Executor，bustub 采用了迭代器模型(火山模型)：一个 Executor 执行一次 <code>Next()</code> 就会返回一条符合对应条件的 Tuple。</p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="分析projection-executor" tabindex="-1"><a class="header-anchor" href="#分析projection-executor"><span>分析Projection_executor</span></a></h3><p>官方文档中提到了，Projection_executor 已经由官方提供给我们了，所以我们可以借助其快速上手。</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>结合上面的例子，这里的 <code>child_executor_</code> 就是上面的 HashJoin，我们调用 <code>child_executor_-&gt;Next(...)</code>从 HashJoin 中拿到一个 Tuple，随后对其中的属性进行投影。</p><ul><li>如何取出 Tuple 中某一个属性的值：拿到对应的 expr ，随后使用 <code>expr-&gt;Evalute(&amp;tuple, ...)</code> 即可，这个在之后也会用到。</li><li>如何构造出一个 Tuple：构造一个 <code>std::vector&lt;Value&gt;</code> 储存每一个属性的值</li></ul><p>至此，我们应该对迭代器模型有了更深刻的认识，最上层的节点调用 <code>Next()</code>，而其中又会调用下一层节点的 <code>Next()</code>，就像找下一层节点要 Tuple 一样，以此类推最终得出结果。这样的过程犹如流水线一般，从上而下依次索取 Tuple</p><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现"><span>实现</span></a></h2><h3 id="task-1-access-method-executors" tabindex="-1"><a class="header-anchor" href="#task-1-access-method-executors"><span>Task #1 - Access Method Executors</span></a></h3><p>这部分大致要掌握几个类 ：<code>Catalog</code> <code>TableHeap</code></p><p>比如我们需要表的元信息和表的索引时，我们先通过上下文 <code>exec_ctx_</code>：拿到 Catalog ，其中有所有表和索引的元信息，随后按需获取</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>如果你使用的是 Clion ，只需点击一下 <code>GetCatalog()</code> ，随后按 Ctrl+Alt+b 就可一键切换到定义处，非常方便 （可能需要先解除 Vim 的快捷键）。包括头文件，变量等等，都可以这样一键到达。</p></blockquote><p>而 TableHeap 类，其中则包括了所有更新元组，读取元组的操作。</p><p>这里建议做的时候回顾课件 lecture#03 -&gt; Heap File organization/ Page layout/ Tuple layout</p><ul><li>对于删除操作，我们并不真正删除一个 Tuple ，而是通过 <code>UpdateTupleMeta()</code> 标注其 MetaData 中的 is_deleted 变量</li><li><strong>对于更新操作，我们从 Next 中只能拿到要删除的 Tuple ，那新的 Tuple 从哪儿拿呢？</strong></li></ul><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>update_plan比别的多了一个成员变量,答案就来自于 update_plan.h 中的 <code>target_expressions_</code>。</p><p>并且正如我上面在分析投影提到的，我们通过 Evaluate 拿到一个 Tuple 的一个属性的值，所以可以如下拿到新的 Tuple</p><figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>而更新索引的操作则涉及到我们之前项目中写过的 B+Tree Index，从项目介绍中可以大致了解 bustub 的索引类型：</p><blockquote><p>The type of the index object in the plan will always be <code>BPlusTreeIndexForTwoIntegerColumn</code> in this project. You can safely cast it and store it in the executor object:</p></blockquote><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">tree_ </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#ABB2BF;"> dynamic_cast</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">BPlusTreeIndexForTwoIntegerColumn </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">index_info_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">index_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//using BPlusTreeIndexForTwoIntegerColumn = BPlusTreeIndex&lt;IntegerKeyType, IntegerValueType, IntegerComparatorType&gt;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到我们拿到索引并转型成 BPlusTreeIndex 类型，BplusTreeIndex 其实就是对我们在 Project2 中写的 BPlusTree 的一个包装。</p><figure><img src="`+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>注意它的三个迭代器用法正好对应我们在 Project2 中所写的那三个迭代器函数，所以我们在这要做的就是调用 <code>tree_-&gt;GetBeginIterator()</code>，(当然后续优化这个会被换掉)，对每个迭代器进行解引用会得到 MappingType，如下所示</p><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>随后就可以拿到 RID 了，根据 RID 就可以拿到 Tuple 了：<code>table_info_-&gt;table_-&gt;GetTuple(*rid)</code></p><p>分享一下我的构造函数以帮助同学上手。</p><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里的 index_scan 实际上就是为了后续 OrderBy 规则的，因为 index_scan 得到的数据天生是排好序的。而在优化中，我们可以进一步完善，使其起到过滤的作用。</p><h3 id="task-2-aggregation-join-executors" tabindex="-1"><a class="header-anchor" href="#task-2-aggregation-join-executors"><span>Task #2 - Aggregation &amp; Join Executors</span></a></h3><p>如果你也像我一样已经忘了很多数据库操作，这儿有一个网站可以快速帮你回忆起来</p><p><a href="https://www.w3schools.com/sql/default.asp" target="_blank" rel="noopener noreferrer">SQL Tutorial</a></p><p>对于 Aggregation，并没有太多好说的，唯一需要注意的就是当为空表的时候，我们（或许）需要往哈希表中插入一个空键值对。</p><p>对于 NLJ，这个是不太好写的，尽管看上去很简单：</p><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>难点在于我们一次 Next 只返回一个 Tuple，如何让这一次的 Next 接着上一次的 Next 继续而不是重头再来？</p><p>我这里手动记录了上下文：<strong>当前的 Outer_tuple</strong> 对应上图的小写 r 以及<strong>所有的 Inner_tuples</strong> 对应上图的大写 S ，以及<strong>当前遍历到的小写 s 的序号</strong>，这样每一次 Next 只需递增这个序号即可。</p><p>并且每调用一次 Outer 的 Next 要记得对 Inner 的进行一次 Init</p><p>对于 HashJoin，我们直接对 Aggregation 中的哈希表进行模仿即可：</p><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>翻译完毕之后就可以使用了，细节均可参考 Aggregation 中的那个哈希表。</p><p>需要注意的是 HashJoin 是 <strong>Pipeline Breaker，</strong> 这意味着它需要在 Init 阶段就建立哈希表并完成探测，后面的 Sort 也是这样，在 Init 阶段就得到所有结果。</p><p>对于如何优化 NLJ 为 HashJoin，我们可以借鉴 <code>nlj_as_index_join.cpp</code>。</p><figure><img src="'+x+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>首先，我们递归的对子节点运用这些规则，这是因为对于一个嵌套的 Join ，我们需要对每个 Join 都进行优化。</p><p>随后，我们将其转化为 nlj_plan，并提取谓词 Predicate 出来。</p><p>对于这次的 Project 我们需要完成两种等值 Join</p><ol><li><code>&lt;column_expr&gt; = &lt;column_expr&gt;</code> 比如 test_1.colA = test_2.colA</li></ol><p>这种只需如图中一样提取出左右两边 Tuple 就好了，随后构造 Plan 返回</p><ol start="2"><li><code>&lt;column_expr&gt; = &lt;column_expr&gt;</code> and <code>&lt;column_expr&gt; = &lt;column_expr&gt;</code></li></ol><p>这种需要阅读 <code>logic_expression.h</code>，最终也是差不多的步骤</p><p>我们也可以借鉴学习 2022 年的是怎么写的。</p><figure><img src="'+y+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="task-3-sort-limit-executors-and-top-n-optimization" tabindex="-1"><a class="header-anchor" href="#task-3-sort-limit-executors-and-top-n-optimization"><span>Task #3 -Sort + Limit Executors and Top-N Optimization</span></a></h3><p>这里的 sort 和 limit 应该是很简单了</p><p>而 topn 需要对 C++ 的 prority_queue 有一定了解，它是一个大根堆，我们需要这样初始化它：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">std::</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">priority_queue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Tuple</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, std::</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">vector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Tuple</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">CompareRule</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">topn_res</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      CompareRule</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">plan_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetOrderBy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">child_executor_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetOutputSchema</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 CompareRule 是我们自己编写的类，重载了 <code>operator()</code> 运算符</p><p>这里将 Sort 和 Limit 优化成 Topn 也不难，明确这两个节点的顺序：Sort 是 Limit 的 child_executor 即可。</p><h2 id="在-clion-上使用-git" tabindex="-1"><a class="header-anchor" href="#在-clion-上使用-git"><span>在 Clion 上使用 git</span></a></h2><p>最近尝试了一下 Clion 上的 git ，就再也不想用命令行了！我们首先在 Clion 上授权登陆 github 账号</p><p>随后在上方点击 Git，点击显示 Git 日志，我们就可以在下面详细的看到每一条提交记录了，随便点击一条，右边就会显示出这次提交修改的文件，点击文件，就能看到这次提交作了哪些修改。</p><p><img src="`+_+'" alt="" loading="lazy"><br><img src="'+A+'" alt="" loading="lazy"></p><p>如果你需要提交/推送，点击 Git ，点击提交</p><figure><img src="'+C+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>点击提交并推送即可。如果需要合并分支，可以点击分支，随后签出过去，然后点击合并，选择想要的分支合并即可。比如：我在 p3 分支上完成项目，当我完成后，我签出到我的 master 分支，然后合并 p3 分支。</p><h2 id="知识补充" tabindex="-1"><a class="header-anchor" href="#知识补充"><span>知识补充</span></a></h2><p>课上因为时间短暂，Andy 并没有详细的展开讲模型的优缺点 (或许这部分在 15721 里？) 这里进行一些补充。</p><ol><li>火山模型的优点与缺点</li></ol><p>这个模型应用非常广泛，优点也很显然：每个 Executor 都被抽象成独立的个体，只需要关注当前 Executor 的逻辑实现。但它也有几个缺点：</p><ul><li>大量的虚函数调用：我们每调用一次 Next 就对应一次虚函数调用，这会造成不小的性能开销。</li><li>在每一个 Next 调用中，又嵌套着一层层的 子Next 调用，也就是说每次 Next 都要经过大量的代码段，这无疑会对缓存造成影响：无论是高速缓存还是 TLB 等等。</li></ul><p>这两个缺点在以前的年代是不值一提的，火山模型是在 90 年代提出的，当时数据库的主要 bottleneck 是 IO 而且内存不够。如今随着储存速度越来越快，很多数据都可以跑到内存上，这时火山模型的效率就捉襟见肘了。这也是为什么向量化流行的原因，它能对缓存，分支预测等起到很好的保护作用。</p><p>不过，<strong>对于 OLTP 来说，火山模型就够了</strong>，毕竟一次 Query 的 Tuple 数量不大。</p><ol start="2"><li>向量化模型</li></ol><p>一次取一堆数据，适用于 OLAP</p><p>考虑 <code>SELECT SUM(age) FROM students</code> ，对于火山模型，我们一次取一个 Tuple ，所以正如我们程序所写的，我们最后是 a+b 的形式。而向量化模型是 a[] + b[] 的形式，数组加数组是非常方便优化的，不论是 编译器 层面还是 CPU 层面，方便进行并行计算。</p><p>并且我们一次可以拿更多数据到内存，从而在内存上计算。</p><h2 id="推荐阅读" tabindex="-1"><a class="header-anchor" href="#推荐阅读"><span>推荐阅读</span></a></h2><p>这篇文章大致讲述了 火山模型 与 向量化模型 的优缺点：<a href="https://zhuanlan.zhihu.com/p/100933389" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/100933389</a></p><p>这篇文章很好的解释了论文，分析了火山模型的缺点：<a href="https://zhuanlan.zhihu.com/p/587568943" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/587568943</a></p><h2 id="optional-leaderboard-tasks" tabindex="-1"><a class="header-anchor" href="#optional-leaderboard-tasks"><span>Optional Leaderboard Tasks</span></a></h2><p><strong>由于是 Leaderboard，所以并不会详细说我是怎么做的</strong></p><p>Bustub 允许我们精益求精，实现额外的优化准则。在实现这部分之前，我先把所有的 optimizer 下的优化规则阅读了一遍：</p><ul><li><code>merge_filter_nlj.cpp</code> ：当 nlj 谓词为 true，将谓词融入 NLJ</li><li><code>merge_projection.cpp</code> ：当且仅当投影的列和下面的列顺序一致且类型一致，直接去掉投影</li><li><code>merge_filter_scan.cpp</code> ：将 filter 谓词融入 SeqScan 中。这部分需要额外的改写，改写完 SeqScan 后，类似 <code>SELECT * FROM test_2 WHERE colA=2;</code> 这样的语句只需要一层就能解决了。</li></ul><figure><img src="'+B+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这些优化规则中最需要理解的我认为是：<code>merge_filter_nlj.cpp</code>其中涉及对列序号的改写，并且在什么时候 merge 也有一定的讲究。</p><p>接下来开始针对着写优化：</p><h3 id="q1" tabindex="-1"><a class="header-anchor" href="#q1"><span>Q1</span></a></h3><p>完成 Q1 首先要求我们完成对应的计划，其中有很多难点，解决的方式很灵活。但首先要明确一点，就是 Bustub 只支持一个或两个整数的索引，所以我们不用写的太复杂。</p><ul><li>对于如何提取索引列，我是对 Filter Predicate 构建哈希表，随后拿索引的列在哈希表中查找</li><li>对于如何构造索引的 Key，我们需要使用 <code>SetFromKey()</code>方法。我们根据 Value 构造出 Tuple，这个 Tuple 的 Schema 不重要，可以随便找个 Schema 然后用 <code>CopySchema()</code></li><li>在改写规则的时候会依据索引的名字从表中拿idx ，需要注意即使是同一列 索引拿到的 Name 和 Schema 中的 Name 也是不一样的。</li></ul><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Index name: x, table_col_name: t1.x</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">uint32_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> index_idx </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> seq_plan</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">output_schema_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetColIdx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">seq_plan</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">table_name_</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;.&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> index_column</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="q2" tabindex="-1"><a class="header-anchor" href="#q2"><span>Q2</span></a></h3><p>谓词下推没有我想的简单，连续肝了五六个小时才做完。</p><p>谓词下推中比较复杂的就是<strong>列下标的转换</strong>和<strong>遍历方式的改变</strong>。</p><p>首先，我们原先所有的优化规则用的都是后序遍历，也就是由下向上的遍历，这样的话，谓词就只能下推一层。所以我们必须使用前序遍历，将应有的谓词尽可能的推到下层节点。</p><p>例如下图的四表 Join，基本每个条件都下推到了应在的位置，标号也都是一一对应的。</p><figure><img src="`+M+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>列下标的转换的处理很灵活，各有不同，建议结合 <code>merge_filter_nlj.cpp</code>中对列的重写一起思考。</p><p>在跑这个例子的时候发现测评的机子是真的好，比我的虚拟机快了10倍。。这个 Q2 也是整个 CMU15445 最令我印象深刻的。原本我的机器跑 10 分钟都跑不出 1 遍，优化完后 几分钟就能 跑 10 遍。这真切的让我感受到算法是真的有用的。</p><p>最后还留下点思考：我们都知道 Join 表的左侧应该是小表，这样性能才更高。</p><p><strong>那如何判断两张表大小呢?</strong> 如果直接比较两张表的行数显然是不行的，因为还需要考虑 Filter 可能对其中一张表进行过滤。我认为或许可以使用 选择率 来解决，根据 选择率 来决定哪张表小。</p><h3 id="q3" tabindex="-1"><a class="header-anchor" href="#q3"><span>Q3</span></a></h3><blockquote><p>SELECT v, d1, d2 FROM (<br> SELECT v,<br> MAX(v1) AS d1, MIN(v1), MAX(v2), MIN(v2),<br> MAX(v1) + MIN(v1), MAX(v2) + MIN(v2),<br> MAX(v1) + MAX(v1) + MAX(v2) AS d2<br> FROM t7 LEFT JOIN (SELECT v4 FROM t8 WHERE 1 == 2) ON v &lt; v4<br> GROUP BY v<br> );</p></blockquote><p>首先我们看到 Join 的右节点的条件恒为 False，于是我们可以增加一条规则来提前计算 恒为错的 Filter，直接将其优化为 0 行的表，这样就无需 Join 了。</p><p>对于聚集函数的投影，下面这个问题解决了我的疑惑，有聚集函数的投影不能带有除了 group-by 属性之外的非聚集属性。</p><p><a href="https://stackoverflow.com/questions/5920070/why-cant-you-mix-aggregate-values-and-non-aggregate-values-in-a-single-select" target="_blank" rel="noopener noreferrer">https://stackoverflow.com/questions/5920070/why-cant-you-mix-aggregate-values-and-non-aggregate-values-in-a-single-select</a></p><p>剩余的就是将不需要的聚集函数给优化掉了。因为有 group-by 列，所以我这里的实现比较丑陋，重构了几个 schema 之后才解决这个问题。这里的实现非常自由，而我的实现是有一定局限性的。比如：如果 group-by 中出现了 v1 + v2 + v3 这样的式子，或许我的算子就会出错了。后续可能会阅读好的数据库源码来学习一下该怎么写。</p><p>最后时间也是比我原先快了不少，不过我对 Q1 做到 1 是很疑惑的？不知道有什么奇淫巧技在里面。</p><figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从 4000 到 400 的飞跃</p><h2 id="最后" tabindex="-1"><a class="header-anchor" href="#最后"><span>最后</span></a></h2><p>因为本地测试和远程测试一样，所以可以很快速的响应错误了。总的来说，相比于原来只会写一些简单的 SQL 语句，对数据库的了解更深了。</p><p><del>至于剩下的优化，后续有时间会补上，大致看了一下，似乎是要做<strong>谓词下推</strong>等进一步的优化，这部分应该很有意思。</del></p><figure><img src="'+E+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',135)]))}const z=s(T,[["render",F],["__file","p3.html.vue"]]),P=JSON.parse('{"path":"/posts/project/CMU15445/p3.html","title":"CMU15445 (Spring 2023) Project #3 - Query Execution","lang":"zh-CN","frontmatter":{"date":"2024-09-22T00:00:00.000Z","category":["数据库"],"tag":["C++"],"footer":"凉了的馒头","description":"CMU15445 (Spring 2023) Project #3 - Query Execution 前言 这次的 Project 要求我们实现几个简单的 Executor ，写完这个 Project 我们就可以在 bustub-shell 中检验自己的成果了。 官方文档 这个项目要求阅读不少的代码，所以本文还会穿插介绍一些 Clion 的快捷键。 ...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/project/CMU15445/p3.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"CMU15445 (Spring 2023) Project #3 - Query Execution"}],["meta",{"property":"og:description","content":"CMU15445 (Spring 2023) Project #3 - Query Execution 前言 这次的 Project 要求我们实现几个简单的 Executor ，写完这个 Project 我们就可以在 bustub-shell 中检验自己的成果了。 官方文档 这个项目要求阅读不少的代码，所以本文还会穿插介绍一些 Clion 的快捷键。 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p3/1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-10T03:04:45.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:published_time","content":"2024-09-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-10T03:04:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CMU15445 (Spring 2023) Project #3 - Query Execution\\",\\"image\\":[\\"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p3/1.png\\",\\"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p3/2.png\\",\\"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p3/3.png\\",\\"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p3/4.png\\",\\"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p3/5.png\\",\\"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p3/6.png\\",\\"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p3/7.png\\",\\"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p3/8.png\\",\\"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p3/9.png\\",\\"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p3/10.png\\",\\"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p3/11.png\\",\\"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p3/12.png\\",\\"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p3/13.png\\",\\"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p3/14.png\\",\\"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p3/15.png\\",\\"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p3/16.png\\",\\"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p3/17.png\\",\\"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p3/18.png\\",\\"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p3/19.png\\",\\"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p3/20.png\\",\\"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p3/21.png\\",\\"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p3/22.png\\",\\"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p3/23.png\\"],\\"datePublished\\":\\"2024-09-22T00:00:00.000Z\\",\\"dateModified\\":\\"2025-01-10T03:04:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Tyz\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"理解","slug":"理解","link":"#理解","children":[{"level":3,"title":"分析Projection_executor","slug":"分析projection-executor","link":"#分析projection-executor","children":[]}]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[{"level":3,"title":"Task #1 - Access Method Executors","slug":"task-1-access-method-executors","link":"#task-1-access-method-executors","children":[]},{"level":3,"title":"Task #2 - Aggregation & Join Executors","slug":"task-2-aggregation-join-executors","link":"#task-2-aggregation-join-executors","children":[]},{"level":3,"title":"Task #3 -Sort + Limit Executors and Top-N Optimization","slug":"task-3-sort-limit-executors-and-top-n-optimization","link":"#task-3-sort-limit-executors-and-top-n-optimization","children":[]}]},{"level":2,"title":"在 Clion 上使用 git","slug":"在-clion-上使用-git","link":"#在-clion-上使用-git","children":[]},{"level":2,"title":"知识补充","slug":"知识补充","link":"#知识补充","children":[]},{"level":2,"title":"推荐阅读","slug":"推荐阅读","link":"#推荐阅读","children":[]},{"level":2,"title":"Optional Leaderboard Tasks","slug":"optional-leaderboard-tasks","link":"#optional-leaderboard-tasks","children":[{"level":3,"title":"Q1","slug":"q1","link":"#q1","children":[]},{"level":3,"title":"Q2","slug":"q2","link":"#q2","children":[]},{"level":3,"title":"Q3","slug":"q3","link":"#q3","children":[]}]},{"level":2,"title":"最后","slug":"最后","link":"#最后","children":[]}],"git":{"createdTime":1736478285000,"updatedTime":1736478285000,"contributors":[{"name":"BUAA-TYZ","username":"BUAA-TYZ","email":"2506741037@qq.com","commits":1,"url":"https://github.com/BUAA-TYZ"}]},"readingTime":{"minutes":13.16,"words":3948},"filePathRelative":"posts/project/CMU15445/p3.md","localizedDate":"2024年9月22日","excerpt":"\\n<h2>前言</h2>\\n<p>这次的 Project 要求我们实现几个简单的 Executor ，写完这个 Project 我们就可以在 bustub-shell 中检验自己的成果了。</p>\\n<p><a href=\\"https://15445.courses.cs.cmu.edu/spring2023/project3/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">官方文档</a></p>\\n<p>这个项目要求阅读不少的代码，所以本文还会穿插介绍一些 Clion 的快捷键。</p>\\n<p><strong>2023.08.25</strong> 将与项目无关的知识单独整理到最后</p>","autoDesc":true}');export{z as comp,P as data};
