import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as t,o as e}from"./app-GvbLqAZr.js";const n="/blog/assets/posts/CMU15445-Refs/p4/1.png",l="/blog/assets/posts/CMU15445-Refs/p4/2.png",h="/blog/assets/posts/CMU15445-Refs/p4/3.png",p="/blog/assets/posts/CMU15445-Refs/p4/4.png",k="/blog/assets/posts/CMU15445-Refs/p4/5.png",r="/blog/assets/posts/CMU15445-Refs/p4/6.png",d="/blog/assets/posts/CMU15445-Refs/p4/7.png",o="/blog/assets/posts/CMU15445-Refs/p4/8.png",g={};function c(B,s){return e(),a("div",null,s[0]||(s[0]=[t('<h1 id="cmu15445-spring-2023-project-4-concurrency-control" tabindex="-1"><a class="header-anchor" href="#cmu15445-spring-2023-project-4-concurrency-control"><span>CMU15445 (Spring 2023) Project #4 - Concurrency Control</span></a></h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>终于写完了所有的 Project。看着偌大的教室空荡荡的，心里也不由生出一点空虚。后续会继续做 Project3 的优化。</p><p>回到 Project 4，这次的 Project4 主要关于并发控制，我是看完了第 18 课开始做的。而这次的项目指引有不少地方有错，所以更需要我们在做的时候仔细斟酌了。</p><h2 id="task-1-lock-manager" tabindex="-1"><a class="header-anchor" href="#task-1-lock-manager"><span>Task #1 - Lock Manager</span></a></h2><h3 id="理解" tabindex="-1"><a class="header-anchor" href="#理解"><span>理解</span></a></h3><ul><li><strong>如何使用条件变量？</strong></li></ul><p>这个网上应该资料挺多的，大致知道它是用来干什么的就好了。</p><ul><li><strong>怎么理解隔离等级？</strong></li></ul><p>总共有四个隔离等级，由强到弱依次为：</p><p><code>SERIALIZABLE</code>：</p><p>对事务的所有操作加锁并直到事务结束才解锁，所有事务串行执行。这样的严苛条件带来的是安全，这个隔离级别不会出现 幻读、不可重复读 等问题 。Bustub 不支持这个隔离级别</p><p><code>REPEATABLE READ</code> ：</p><p>可重复读级别允许一个事务对同一个对象进行两次读取，可以解决 不可重复读 问题。理由很简单，它会拿着对象的锁直到事务 Commit or Abort 才会释放。</p><p>但它无法解决 幻读 问题，需要额外的 Index_lock，这个项目不会涉及这点。</p><p><code>READ COMMITTED</code> ：</p><p>这个级别允许一个事务读已提交的对象，相应的也就无法避免 不可重复读 问题。</p><figure><img src="'+n+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>显然两次读的结果不一致</p><p>所以我们需要 2PL 来保证结果正确。上面的例子中，第一次 R(A）完后释放读锁，事务将进入 Shrink 状态。第二次 R(A) 将引起异常，这就规避了不可重复读这一问题。</p><p><code>READ UNCOMMITTED</code></p><p>读未提交这个隔离级别在读的时候不拿任何锁，可以读未提交的对象，自然也就最不安全。</p><p><strong>这四个隔离级别决定了我们的函数有不同的行为。</strong></p><h3 id="实现" tabindex="-1"><a class="header-anchor" href="#实现"><span>实现</span></a></h3><p>这部分细节较多，如果没耐心自己想，可以看这篇文章的过程描述，写的很清楚。不过还是建议先自己写。</p><p><a href="https://zhuanlan.zhihu.com/p/592700870" target="_blank" rel="noopener noreferrer">十一：做个数据库：2022 CMU15-445 Project4 Concurrency Control</a></p><hr><h2 id="task-2-deadlock-detection" tabindex="-1"><a class="header-anchor" href="#task-2-deadlock-detection"><span>Task #2 - Deadlock Detection</span></a></h2><p>在类中，有函数 <code>FindCycle()</code>。但我看了很久也没看明白函数的几个形参是干啥的，于是自己稍微改了一下形参。总的来说，<code>FindCycle()</code>就是 Dfs，用递归的形式一遍一遍调用自己。</p><p>我个人还在类中多维护了一个变量：<code>std::set&lt;txn_id_t&gt; txn_set_{};</code>来记录所有的事务。set 能保证事务是有序排列的。这满足了下面的条件：</p><blockquote><p>Your cycle detection algorithm must be deterministic. To achieve this, you should always explore the lowest transaction id first, by starting the depth-first search from the node with lowest transaction id and exploring neighbors in order (by transaction id) when searching from a node.</p></blockquote><p>同样，如果我们拿到一个事务它的 wait_for 的集合，需要先排序再使用</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">std::vector</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">txn_id_t</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> wait_for_set </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> waits_for_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[source_txn];</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">std</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">wait_for_set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">begin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">wait_for_set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">end</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>课程提示还有这样一条：</p><blockquote><p>When you find a cycle, abort the <strong>youngest</strong> transaction to break the cycle by setting that transaction&#39;s state to ABORTED.</p></blockquote><p>因为 txn_id 是按序分配的，所以我们对每一个环，就挑最大的 txn_id 来 Abort 就好了。</p><p>这块难度不高，会深搜就没问题。</p><h2 id="task-3-concurrent-query-execution" tabindex="-1"><a class="header-anchor" href="#task-3-concurrent-query-execution"><span>Task #3 - Concurrent Query Execution</span></a></h2><p>我们的每一个 Lock 或 Unlock 函数都要捕获异常。</p><p>由于异常是多态的，捕获的时候记得这样写：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(TransactionAbortException </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面介绍需要修改的三个算子，其中 Delete 那个算子不用加锁，所以我们只需要注意另外两个算子就好了。</p><h3 id="seqscan" tabindex="-1"><a class="header-anchor" href="#seqscan"><span>SeqScan</span></a></h3><ul><li>我们需要根据 <code>exec_ctx_-&gt;IsDelete()</code> 来判断拿什么锁，理由我将在下面的 Delete 部分讲。</li></ul><p>下面我口述一下过程，</p><p>Init 函数中对需要加什么锁进行判断。</p><p>如果 IsDelete() 为 false 并且 当前表未被 IX or X lock 锁住 并且隔离级别不为 READ_UNCOMMITTED，则对表上 IS lock。</p><p>如果 IsDelete() 为 true ，则对表上 IX lock。</p><p>Next 函数中思路基本类似，根据 IsDelete 决定加 S or X lock。</p><p>最后如果 IsDelete() 为 false 并且 隔离级别为 READ_COMMITTED ，还可以释放所有的 S lock。</p><ul><li>在最后释放锁的时候，我们需要以值的形式拿到 <code>row_lock_set</code>，因为 UnlockRow 会不断删除 ExclusiveRowLockSet。如果使用引用将引起内存错误。</li></ul><figure><img src="`+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>在 Test 时碰到的 Bug</li></ul><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>我们先 Insert 一个 Tuple，于是上了 IX 锁。随后我们进行 Scan，这里会尝试上 IS 锁，于是会升级异常。正确的做法是上锁前先检查有无 IX 锁，再做下一步决定，上面已经提到了。</p><h3 id="insert" tabindex="-1"><a class="header-anchor" href="#insert"><span>Insert</span></a></h3><p>Init 中对表上 IX lock。Next 中调用 <code>InsertTuple()</code>，它的函数中会帮我们加锁。</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>另外别忘了维护写集：<code>exec_ctx_-&gt;GetTransaction()-&gt;AppendTableWriteRecord</code></p><p><code>exec_ctx_-&gt;GetTransaction()-&gt;AppendIndexWriteRecord</code></p><h3 id="delete" tabindex="-1"><a class="header-anchor" href="#delete"><span>Delete</span></a></h3><p>只需多加入维护写集的逻辑</p><ul><li><strong>为什么我们在 Delete 的时候不需要上锁？</strong></li></ul><p>因为 Delete 之前我们需要先 Scan 整张表来寻找符合条件的 Tuple 删除。调用顺序如下：</p><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>所以我们直接在 SeqScan 处先对表和每个拿到的 Row 上锁，随后 Delete 的时候因为之前已经上过锁了，所以自然没必要再上锁了。</p><p>我们也可以自己思考一下为什么 Insert 不像 Delete 这样做。</p><ul><li><strong>Delete 函数调用的 SeqScan 应该对表上 X lock 还是 IX lock ？</strong></li></ul><p>我一开始根据课程描述一直上的是 X lock，一直过不去。后来看了 test：</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>它会对一个表先进行 Delete 随后又 Insert。所以因为 Delete 先上 X lock，将会导致 Insert 的 IX lock 引发 锁升级 异常，这部分的所有事务将通通被 abort ，所以过不去测试。</p><p><strong>所以即便是 Delete， 也要在 SeqScan 时上 IX lock。</strong></p><p>下面讲一下最后两个函数</p><h3 id="commit" tabindex="-1"><a class="header-anchor" href="#commit"><span>Commit</span></a></h3><figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这里说会在 <code>Commit</code>前删除之前没有删除的 Tuple，但我并没有找到删除的函数，所以这里应该是会在别的地方删除？总之，我们无需对 <code>Commit</code>做出任何改动。</p><h3 id="abort" tabindex="-1"><a class="header-anchor" href="#abort"><span>Abort</span></a></h3><ul><li><strong>我们如何 Undo?</strong></li></ul><p>我一开始一直想得很复杂，因为我以为要真正删除一个 Tuple。但其实很简单：就是改 TupleMeta 就行。</p><p>随后对索引 Undo 更简单了，直接粘贴 2022 年的实现即可。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Rollback indexes</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> index_write_set </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> txn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetIndexWriteSet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">index_write_set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">empty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    auto</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> &amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">item </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> index_write_set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">back</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    auto</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">catalog </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> item</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">catalog_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Metadata identifying the table that should be deleted from.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    TableInfo </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">table_info </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> catalog</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetTable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">item</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">table_oid_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    IndexInfo </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">index_info </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> catalog</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetIndex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">item</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">index_oid_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> new_key </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> item</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">tuple_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">KeyFromTuple</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">table_info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">schema_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">index_info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">index_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetKeySchema</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()),</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                                            index_info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">index_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetKeyAttrs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">item</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">wtype_</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> WType::DELETE) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">      index_info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">index_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">InsertEntry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(new_key, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">item</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">rid_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, txn);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">item</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">wtype_</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> WType::INSERT) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">      index_info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">index_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">DeleteEntry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(new_key, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">item</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">rid_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, txn);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">item</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">wtype_</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> WType::UPDATE) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      // Delete the new key and insert the old key</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">      index_info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">index_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">DeleteEntry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(new_key, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">item</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">rid_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, txn);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">      auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> old_key </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> item</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">old_tuple_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">KeyFromTuple</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">table_info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">schema_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">index_info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">index_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetKeySchema</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()),</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                                                  index_info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">index_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">GetKeyAttrs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">      index_info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">index_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">InsertEntry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(old_key, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">item</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">rid_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, txn);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    index_write_set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pop_back</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为文档有些问题，所以这个 Task 对我反而是最难完成的</p><h2 id="最后" tabindex="-1"><a class="header-anchor" href="#最后"><span>最后</span></a></h2><p>这次的 Project4 截至到今天有近 50 个人完成。因为 fall 2023 已经开课了，所以后续看来也不会超过 100 人了。。</p><figure><img src="`+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>下一个 Project 做什么好呢！</p>',86)]))}const u=i(g,[["render",c],["__file","p4.html.vue"]]),F=JSON.parse('{"path":"/posts/project/CMU15445/p4.html","title":"CMU15445 (Spring 2023) Project #4 - Concurrency Control","lang":"zh-CN","frontmatter":{"date":"2024-09-05T00:00:00.000Z","category":["数据库"],"tag":["C++"],"footer":"凉了的馒头","description":"CMU15445 (Spring 2023) Project #4 - Concurrency Control 前言 终于写完了所有的 Project。看着偌大的教室空荡荡的，心里也不由生出一点空虚。后续会继续做 Project3 的优化。 回到 Project 4，这次的 Project4 主要关于并发控制，我是看完了第 18 课开始做的。而这次的项...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/project/CMU15445/p4.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"CMU15445 (Spring 2023) Project #4 - Concurrency Control"}],["meta",{"property":"og:description","content":"CMU15445 (Spring 2023) Project #4 - Concurrency Control 前言 终于写完了所有的 Project。看着偌大的教室空荡荡的，心里也不由生出一点空虚。后续会继续做 Project3 的优化。 回到 Project 4，这次的 Project4 主要关于并发控制，我是看完了第 18 课开始做的。而这次的项..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p4/1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-10T03:04:45.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:published_time","content":"2024-09-05T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-10T03:04:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CMU15445 (Spring 2023) Project #4 - Concurrency Control\\",\\"image\\":[\\"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p4/1.png\\",\\"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p4/2.png\\",\\"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p4/3.png\\",\\"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p4/4.png\\",\\"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p4/5.png\\",\\"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p4/6.png\\",\\"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p4/7.png\\",\\"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p4/8.png\\"],\\"datePublished\\":\\"2024-09-05T00:00:00.000Z\\",\\"dateModified\\":\\"2025-01-10T03:04:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Tyz\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"Task #1 - Lock Manager","slug":"task-1-lock-manager","link":"#task-1-lock-manager","children":[{"level":3,"title":"理解","slug":"理解","link":"#理解","children":[]},{"level":3,"title":"实现","slug":"实现","link":"#实现","children":[]}]},{"level":2,"title":"Task #2 - Deadlock Detection","slug":"task-2-deadlock-detection","link":"#task-2-deadlock-detection","children":[]},{"level":2,"title":"Task #3 - Concurrent Query Execution","slug":"task-3-concurrent-query-execution","link":"#task-3-concurrent-query-execution","children":[{"level":3,"title":"SeqScan","slug":"seqscan","link":"#seqscan","children":[]},{"level":3,"title":"Insert","slug":"insert","link":"#insert","children":[]},{"level":3,"title":"Delete","slug":"delete","link":"#delete","children":[]},{"level":3,"title":"Commit","slug":"commit","link":"#commit","children":[]},{"level":3,"title":"Abort","slug":"abort","link":"#abort","children":[]}]},{"level":2,"title":"最后","slug":"最后","link":"#最后","children":[]}],"git":{"createdTime":1736478285000,"updatedTime":1736478285000,"contributors":[{"name":"BUAA-TYZ","username":"BUAA-TYZ","email":"2506741037@qq.com","commits":1,"url":"https://github.com/BUAA-TYZ"}]},"readingTime":{"minutes":6.05,"words":1814},"filePathRelative":"posts/project/CMU15445/p4.md","localizedDate":"2024年9月5日","excerpt":"\\n<h2>前言</h2>\\n<p>终于写完了所有的 Project。看着偌大的教室空荡荡的，心里也不由生出一点空虚。后续会继续做 Project3 的优化。</p>\\n<p>回到 Project 4，这次的 Project4 主要关于并发控制，我是看完了第 18 课开始做的。而这次的项目指引有不少地方有错，所以更需要我们在做的时候仔细斟酌了。</p>\\n<h2>Task #1 - Lock Manager</h2>\\n<h3>理解</h3>\\n<ul>\\n<li><strong>如何使用条件变量？</strong></li>\\n</ul>\\n<p>这个网上应该资料挺多的，大致知道它是用来干什么的就好了。</p>","autoDesc":true}');export{u as comp,F as data};
