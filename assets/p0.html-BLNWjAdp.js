import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,d as a,o as t}from"./app-Cc-V_zzY.js";const n="/blog/assets/posts/CMU15445-Refs/p0/1.png",l="/blog/assets/posts/CMU15445-Refs/p0/2.png",p="/blog/assets/posts/CMU15445-Refs/p0/3.png",h="/blog/assets/posts/CMU15445-Refs/p0/4.png",r="/blog/assets/posts/CMU15445-Refs/p0/5.png",d="/blog/assets/posts/CMU15445-Refs/p0/6.png",k="/blog/assets/posts/CMU15445-Refs/p0/7.png",o="/blog/assets/posts/CMU15445-Refs/p0/8.png",c="/blog/assets/posts/CMU15445-Refs/p0/9.png",g={};function A(u,s){return t(),e("div",null,s[0]||(s[0]=[a('<h1 id="cmu15445-spring-2023-project-0-c-primer" tabindex="-1"><a class="header-anchor" href="#cmu15445-spring-2023-project-0-c-primer"><span>CMU15445 (Spring 2023) Project #0 - C++ Primer</span></a></h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>写这篇文章，初衷是因为网上很少有CMU15445-2023的博客文章。记录下我在做的过程中走过的弯路，一方面是对自己工作的一个总结，另一方面也能帮助到在做这门课的 #project 时踩坑而无从下手的同学，何乐而不为？</p><p><strong>2023-06-25</strong> 补充 task2 内容</p><p><strong>2023-07-21</strong> 补充 task3 内容</p><p><strong>2023-08-23</strong> 补充截断的原因</p><p><strong>2023-10-27</strong> 补充环境配置</p><h2 id="一、你需要提前知道的" tabindex="-1"><a class="header-anchor" href="#一、你需要提前知道的"><span>一、你需要提前知道的</span></a></h2><blockquote><p>我使用的编译环境： 系统：Ubuntu 20.04.1 IDE：Clion<br> 推荐使用 Ubuntu 22.04 版本</p></blockquote><h3 id="环境配置" tabindex="-1"><a class="header-anchor" href="#环境配置"><span>环境配置</span></a></h3><p>环境配置其实需要对 Linux 有一定的了解，然而有一定的了解的人一般都已经配好了环境。所以环境配置的适用者主要针对新手。然而新手的知识欠缺的知识太多， 确实很难面面俱到。下面是我个人在写这个项目时的配置：</p><ol><li>如果没有 Linux 环境，先装个 Vmware</li></ol><p><a href="http://t.csdnimg.cn/btQ6e" target="_blank" rel="noopener noreferrer">Vmware安装</a></p><ol start="2"><li>安装 Linux 镜像，一定选择 Ubuntu22.04 版本 (安装的网络一定选择NAT模式)</li></ol><p><a href="http://t.csdnimg.cn/49pUQ" target="_blank" rel="noopener noreferrer">安装镜像</a></p><p>截止<strong>2024-06-08</strong>，似乎上面两个链接都已失效。直接上CSDN搜索安装教程即可，CSDN虽然在很多方面为人诟病，但安装教程相对还是比较可靠的。</p><p>并且即使不做这个项目，安装一个linux虚拟机玩也是有利无害的。</p><ol start="3"><li>给虚拟机配置代理。如果没有 VPN，几乎以后所有安装配置都不可能成功(除非你在国外)。<strong>自行寻找</strong>VPN</li></ol><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>打开允许局域网接入</p><p>随后 win+R, 输入 cmd，输入ipconfig</p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>记住这个 IP 地址。在虚拟机中打开设置，随后配置代理</p><figure><img src="'+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>随后打开终端，export -p 检查一下，应该能找到如下两行</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>http_proxy=http://10.194.96.135:7890/</span></span>
<span class="line"><span>https_proxy=http://10.194.96.135:7890/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>说明配置完成，随后 <code>ping www.github.com</code> 试一下</p><p><strong>到这里虚拟机网络就配置好了</strong></p><ol start="4"><li>安装git准备拉入官方代码</li></ol><p><code>sudo apt update</code></p><p><code>sudo apt upgrade</code></p><p><code>sudo apt install git</code></p><p>如果上面的任一步完成不了，上网搜索，换一个 22.04 的清华源，再安装。</p><p>随后配置 git 代理</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>git config --global http.proxy &#39;http://192.168.0.1:1080&#39; #填你们自己的代理，这里就是个例子</span></span>
<span class="line"><span>git config --global https.proxy &#39;http://192.168.0.1:1080&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>找一个文件夹，然后按照官方库描述的 git 操作，一步不差的执行</li></ol><p>这之后就已经成功了，再挑选一款顺手的 IDE 即可</p><ul><li>在 Linux 下推荐使用 Clion，对于激活码什么的自己想办法解决。</li><li>也可以 Vscode ssh 进虚拟机，在 Windows 下写代码。这又是另一个话题了。</li></ul><p>当然现在 WSL 也有很多人推荐使用。然而就我个人认为，虚拟机除了性能会有一定的损失，别的都比 WSL 方便多了。</p><ul><li>使用虚拟机的快照功能，你完全不用担心软件安装的失败等等问题，直接重头再来。我个人曾经安装一个东西时，安装的各个插件版本不匹配。而官方又没有提供删除脚本，最后导致整个安装都失败了，删除也删不干净。幸亏，我在安装前对虚拟机做了一次快照，安装失败后直接重新回到快照节点就好了。</li><li>使用虚拟机的暂停功能，保存你的所有工作状态，一键还原工作场景</li><li>虚拟机可以安装许多台，非常灵活，你甚至可以用它们搭建一个 k8s</li><li>非常稳定，不会像 WSL 偶尔出现难以解决的问题</li></ul><h3 id="语法要求" tabindex="-1"><a class="header-anchor" href="#语法要求"><span>语法要求</span></a></h3><ul><li>掌握 基本C++11语法（C++Primer）</li><li>简单的 C++17语法，如：string_view</li></ul><h3 id="重点掌握" tabindex="-1"><a class="header-anchor" href="#重点掌握"><span>重点掌握</span></a></h3><ul><li>dynamic_cast基本用法</li><li>智能指针的基本用法</li></ul><h3 id="资料推荐" tabindex="-1"><a class="header-anchor" href="#资料推荐"><span>资料推荐</span></a></h3><ul><li>C++ Primer 第五版</li><li>Effective Modern C++</li></ul><p>前者几乎囊括了 C++11 的所有，后者可以更详细地了解右值、万能转发等概念。</p><p><em><strong>如果你想速成这个 lab，就省略资料推荐，找个网课看或许速度更快。</strong></em></p><h2 id="二、四个task" tabindex="-1"><a class="header-anchor" href="#二、四个task"><span>二、四个Task</span></a></h2><h3 id="task-1-copy-on-write-trie" tabindex="-1"><a class="header-anchor" href="#task-1-copy-on-write-trie"><span>Task #1 - Copy-On-Write Trie</span></a></h3><p><code>2023年的 #project0 实现与往年不同，实现的是一棵可持久化的字典树。</code> 具体什么是可持久化的字典树，不建议上网搜索，网上的版本普遍和这个项目的版本有实现上的区别。</p><p>其实<a href="https://15445.courses.cs.cmu.edu/spring2023/project0/" target="_blank" rel="noopener noreferrer">官方描述</a>中写的较为清晰，建议反复阅读直到真正看懂再开始实践做题。</p><p>这一部分，我们要完成 Get、Put、Remove操作</p><p>建议先从 Get 入手。 <code>std::string_view 就是一个字符串视图，它支持size、begin、end、下标操作</code> 我们可以将其当作一个只读字符串。</p><h3 id="get-思路" tabindex="-1"><a class="header-anchor" href="#get-思路"><span>Get( ) 思路</span></a></h3><p>我们沿着字符串找到最后的节点。然后使用<code>dynamic_cast</code>转换。<code>dynamic_cast</code>允许指针安全地向下转换（即由基类转为派生类指针），失败则返回 nullptr 。但这里的问题是智能指针不支持这个转换，故我们使用智能指针的 get( ) 方法取得裸指针，然后再进行转换就好了。</p><p>接着写 Put</p><h3 id="put-思路" tabindex="-1"><a class="header-anchor" href="#put-思路"><span>Put( ) 思路</span></a></h3><p>这里的关键在于阅读好官方对该方法的说明。我们在插入节点时，并非是在原Trie上插入节点，而是在搜索要插入节点的路径上不断 Clone( )，只有这样，我们才能得到非const的节点来对其children_进行操作。我的做法是使用多个指针进行维护，初始时两个指针都指向父节点，然后令一个指针下探进行操作，另一个指针不变，等操作完后更新父节点，再下探。</p><p>课程不给展示代码，我附一点点帮助大家理解并开头</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">std::shared_prt</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">TrieNode</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">cur </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">shared_ptr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">TrieNode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">root_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Clone</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其次要意识到 Clone( ) 是得到一个全新的节点，我们需要记得与它的上一层节点保持连接。</p><p>最后附一个想了很久的bug，我在网上找了很久没一个人提到...可能大家都默认了...</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//B是A的派生类</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//b是B类型的对象</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">std::shared_ptr</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">A</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> std::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">make_shared</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;(b);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看这个例子，我想当然的认为<code>make_shared</code>会保留多态性质生成一个指向b的基类指针。然而事实是<code>make_shared</code>会先截断b，只留下A部分的值，然后生成指针。在本题中就是<strong>TrieNodeWithValue</strong>会被截断为<strong>TrieNode</strong>，那就错了。</p><p>这样的bug非常难找，找到之后也很难绕过来，网上也找不到相关说明，非常折磨。</p><p>正确做法是</p><p><code>std::shared_ptr&lt;A&gt; a = std::make_shared&lt;B&gt;(b);</code></p><p>如下：最后分别打印 A B</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;iostream&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;memory&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">using</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> namespace</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> std</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    virtual</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;A&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> B</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">override</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        cout </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;B&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> endl;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    B b{};</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    shared_ptr</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">A</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ptr1 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> make_shared</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;(b);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    shared_ptr</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">A</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ptr2 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> make_shared</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">B</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;(b);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    ptr1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    ptr2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //shared_ptr&lt;A&gt;ptr3 = shared_ptr&lt;A&gt;(ptr2);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //ptr3-&gt;print();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>那么，为什么 <code>shared_ptr&lt;A&gt; ptr1 = make_shared&lt;A&gt;(b)</code> 会截断呢？</strong></p><p>我们可以看一下 <code>make_shared</code> 是怎么写的。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">template</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">typename</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">typename</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">... </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">shared_ptr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">make_shared</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Args</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">... </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> shared_ptr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">std</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">forward</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;(args)...));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不难发现它是调用 new 全新构造了一个 <code>shared_ptr&lt;T&gt;</code> ，new 的参数就是我们传递给它的参数，这里是值语义的调用。它实际调用了 <code>new A(b)</code>。 这里数据被截断了。 而对于 <code>shared_ptr&lt;A&gt; ptr2 = make_shared&lt;B&gt;(b)</code> ，它实际调用 <code>new B(b)</code> 这里数据不会被截断，后续只是指针类型被声明为了 A。</p><p><strong>而为什么 <code>shared_ptr&lt;A&gt;ptr3 = shared_ptr&lt;A&gt;(ptr2)</code> 这句不会截断呢？</strong></p><p>因为 shared_ptr 的拷贝构造函数只需要复制指针就好了。所以这里 ptr3 指向的和 ptr2 指向的是一个地方，是指针语义。而指针/引用 可以多态，所以这里不会截断。</p><hr><p>最后写Remove</p><h3 id="remove-思路" tabindex="-1"><a class="header-anchor" href="#remove-思路"><span>Remove( ) 思路</span></a></h3><p>Remove的过程要意识到不只要删除规定节点。 原因： 如果规定节点的父节点只有这一子节点并且自己不是一个值节点，那么我们也需要顺带把它清理掉。这一过程是递归的，我们要从底往上一个一个清理直到遇到不能清理的。</p><h3 id="remove-实现" tabindex="-1"><a class="header-anchor" href="#remove-实现"><span>Remove( ) 实现</span></a></h3><p>这里我的做法是开一个 vector 记录路径节点避免递归，然后从最后向前迭代，按上面的做法删除节点。 顺便一提，<code>const_cast</code>可以消除指针的const属性，可能有时候要用到。但如果你要大量使用之，无疑是你的设计出现了问题。这道题完全可以不用<code>const_cast</code>完成。</p><h3 id="task-2-concurrent-key-value-store" tabindex="-1"><a class="header-anchor" href="#task-2-concurrent-key-value-store"><span>Task #2 - Concurrent Key-Value Store</span></a></h3><p>这一部分我们要完成并发条件下的读写。 这里不要想复杂了，关键在于好好体会可持久化字典树的优势，<strong>好好阅读官方文档</strong>。</p><h3 id="思路" tabindex="-1"><a class="header-anchor" href="#思路"><span>思路</span></a></h3><p>我们在这里完全不用读写锁，只需要两把互斥锁，但得益于可持久化字典树每一次 Put、Remove 都会生成一个新版本的字典树，我们天然地解决了读写者的问题。因为每一个线程的 Put、Remove 都是对新树操作，完全不会影响到别的线程上的 Get，Get 仍在读旧版本的字典树。 (这段可能编完就懂了)</p><hr><p>2023.06.25</p><p>下面大致介绍一下结构</p><figure><img src="`+h+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>trie_store.h</code></p><p>这个<code>TrieStore</code> 类就是对 <code>Trie</code> 的一个包装，含有两把锁，<code>root_lock_</code> 用于 Get ，<code>write_lock_</code> 用于 Put 和 Remove</p><p>其中 Get 方法前四行如此：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    std::lock_guard </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">guard</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(root_lock_);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    auto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cur </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> root_;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们考虑多个线程同时读的情况，因为读并不会修改 <code>Trie</code> 所以我们并不需要对整个 Get 上锁</p><p>而相比之下，Write 要整个函数上锁，因为我们不能允许多个线程同时写。而这里我们用另一把锁而不用<code>root_lock_</code>，是因为 Put 返回的是一棵新的<code>Trie</code>, 在此期间就算 Get ，其读到的也是旧的 <code>Trie</code> 上的内容。我们不在乎</p><p>按这个逻辑思考下来不难发现一个问题，Get 时似乎没有必要上读锁，既然 Get 不会改变 <code>Trie</code> 而 Put Remove 又用的另一把锁，那有什么上锁的必要呢。关于这个问题，我这里的思考是：为了保持时效性。我们考虑下面三个线程，它们按时间顺序由<code>用户</code>执行，注意不是线程执行的顺序，而是用户下达命令的时间顺序：</p><p>用户依次下达命令1，2，3</p><p>命令1：Get</p><p>命令2：Write</p><p>命令3：Get</p><p>但线程执行顺序并不会按照我们预想的那样。如果没有读锁，我们完全可以假设命令3最先完成，随后是命令2，最后是命令1。这样我们后下达的命令反而得到了旧的结果，先下达的命令得到了新的结果。结合下面浏览器搜索历史的例子，这就意味着可能出现一开始是新的搜索历史，而一段时间后反而是旧的搜索历史这样的反直觉行为。</p><p>而如果有一把读锁，则我们可以肯定命令3不会早于命令1，因为命令3拿到的 <code>root_</code>一定比命令1的更新。</p><h3 id="实现" tabindex="-1"><a class="header-anchor" href="#实现"><span>实现</span></a></h3><p>Get 在获取 <code>root_</code> 时上锁</p><p>Put、Remove 对整个函数上锁</p><p>如果是C++11之后，请使用<code>std::lock_guard</code>管理你的<code>std::mutex</code></p><p>C++17之后可以使用<code>std::scoped_lock</code>管理</p><p><a href="http://t.csdn.cn/OQNc9" target="_blank" rel="noopener noreferrer">我的笔记</a></p><hr><p>2023.06.25</p><p>顺便解释一下 <code>std::optional</code> ，最近学了些Rust 对它的理解比较深，<code>std::optional</code>就等价于 rust 中的 <code>Option</code> 。其要么为空，要么为一个值。譬如我们考虑设计一个空队列，我们对其进行<code>pop</code>，那队列为空，我们可以考虑抛出一个异常来提醒用户。也可以用<code>std::optional</code>，因为是空队列，我们就返回<code>std::nullopt</code> ，表示 <code>None</code>，这个队列啥都没有。如果队列非空，我们就返回一个值。上面两种情况不论返回值是空，还是一个值，我们都统一用一个返回值<code>std::optional</code>表示，更加的安全、简洁。用户当收到一个<code>std::optional</code>时也起到提醒用户的作用。</p><hr><p>写完前两个 Task，便理解可持久化的含义了。它保存了不同版本的字典树，而并非始终对同一棵字典树进行修改。</p><p>举个例子：字典树的一个使用场景就是平常我们使用搜索网站的搜索历史。我们每搜索一次就相当于创建一个新的叶结点。如下图：小明想学习C语言和C++，于是小明打开百度搜索这两个关键词，于是搜索历史形成了一个小字典树。其中圆形代表中间节点，正方形代表叶结点。</p><figure><img src="`+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>小明利用百度偷偷卷,经过努力，小明在一周内速成了C语言，他决定将这个搜索记录删了，因为他认为自己已经掌握了C。于是字典树变成了不好看的链表状。</p><p>时间过得很快，一年后，小明发现自己已经把 C 忘光了，以至于他忘记自己学的语言是啥名字了，他想搜索可是不知道名字。更糟糕的是，这时他已经把字典树修改了，回不到过去的历史了，看来小明这辈子都学不会 C 语言了。于是，他在心中暗暗发誓：<em>如果上天能给我再来一次的机会</em>，<em>我会对C语言说三个字：... ...</em></p><p>但是，如果使用<strong>可持久化字典树</strong>，小明只需回调到上个版本即可，因为其可以保存每一次搜索的字典树！于是小明又可以愉快地继续学习了。他很感激可持久化字典树又给了他再来一次的机会。</p><h3 id="task-3-debugging" tabindex="-1"><a class="header-anchor" href="#task-3-debugging"><span>Task #3 - Debugging</span></a></h3><p>Clion 是很强大的 IDE，一开始入手肯定都会不适应，慢慢来就好了，可以进入设置选择 plugin ，然后输入 chinese 下载对应的简体中文插件。</p><p>在 Clion 下，在配置里，课程已经写好了编译文件，我们在 clion 右上角的编译里找到对应的 <code>debug_test</code>并调试即可。clion 的调试对于这种小型结构威力很强，很方便。最终 这里我 debug 出来是 8、1、42 答案是对的，但问题是这个结果依赖于随机数，评测系统生成出来的不是这三个数。 解决方法在这个大佬的文章里：<a href="https://zhuanlan.zhihu.com/p/613920859" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/613920859</a></p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>像这样</p><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>最后答案 7、2、30</p><h3 id="task-4-sql-string-functions" tabindex="-1"><a class="header-anchor" href="#task-4-sql-string-functions"><span>Task #4 - SQL String Functions</span></a></h3><p>比较简单，转换大小写可以使用STL算法 <code>std::transform</code>。另外需要注意的就是返回异常类型时，不要使用<code>std::exception()</code> 项目里有自己的<code>Exception()</code> 按要求构造就完事了。</p><h2 id="三、评测注意" tabindex="-1"><a class="header-anchor" href="#三、评测注意"><span>三、评测注意</span></a></h2><ol><li>评测网站，官网上的FAQ中有写</li><li><strong>只有格式对了，才会开始打分，否则一律0分！</strong></li></ol><h3 id="补充" tabindex="-1"><a class="header-anchor" href="#补充"><span>补充：</span></a></h3><p>我后来给电脑加装了块国产的 2t 硬盘，于是又搞了台新的虚拟机 装了 ubuntu 22.04 版本。安装 clang-format 等都没问题。所以推荐在 22.04 版本下写项目</p><h2 id="四、总结" tabindex="-1"><a class="header-anchor" href="#四、总结"><span>四、总结</span></a></h2><p>期中考试期间断断续续写完这个 project 感觉收获不少，尤其是智能指针，总的来说体验还是不错滴！</p><p>附上评测</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',137)]))}const y=i(g,[["render",A],["__file","p0.html.vue"]]),b=JSON.parse('{"path":"/posts/project/CMU15445/p0.html","title":"CMU15445 (Spring 2023) Project #0 - C++ Primer","lang":"zh-CN","frontmatter":{"date":"2024-07-11T00:00:00.000Z","category":["数据库"],"tag":["C++"],"footer":"凉了的馒头","description":"CMU15445 (Spring 2023) Project #0 - C++ Primer 前言 写这篇文章，初衷是因为网上很少有CMU15445-2023的博客文章。记录下我在做的过程中走过的弯路，一方面是对自己工作的一个总结，另一方面也能帮助到在做这门课的 #project 时踩坑而无从下手的同学，何乐而不为？ 2023-06-25 补充 tas...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/project/CMU15445/p0.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"CMU15445 (Spring 2023) Project #0 - C++ Primer"}],["meta",{"property":"og:description","content":"CMU15445 (Spring 2023) Project #0 - C++ Primer 前言 写这篇文章，初衷是因为网上很少有CMU15445-2023的博客文章。记录下我在做的过程中走过的弯路，一方面是对自己工作的一个总结，另一方面也能帮助到在做这门课的 #project 时踩坑而无从下手的同学，何乐而不为？ 2023-06-25 补充 tas..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p0/1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-10T03:04:45.000Z"}],["meta",{"property":"article:tag","content":"C++"}],["meta",{"property":"article:published_time","content":"2024-07-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-10T03:04:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CMU15445 (Spring 2023) Project #0 - C++ Primer\\",\\"image\\":[\\"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p0/1.png\\",\\"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p0/2.png\\",\\"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p0/3.png\\",\\"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p0/4.png\\",\\"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p0/5.png\\",\\"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p0/6.png\\",\\"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p0/7.png\\",\\"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p0/8.png\\",\\"https://mister-hope.github.io/blog/assets/posts/CMU15445-Refs/p0/9.png\\"],\\"datePublished\\":\\"2024-07-11T00:00:00.000Z\\",\\"dateModified\\":\\"2025-01-10T03:04:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Tyz\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"一、你需要提前知道的","slug":"一、你需要提前知道的","link":"#一、你需要提前知道的","children":[{"level":3,"title":"环境配置","slug":"环境配置","link":"#环境配置","children":[]},{"level":3,"title":"语法要求","slug":"语法要求","link":"#语法要求","children":[]},{"level":3,"title":"重点掌握","slug":"重点掌握","link":"#重点掌握","children":[]},{"level":3,"title":"资料推荐","slug":"资料推荐","link":"#资料推荐","children":[]}]},{"level":2,"title":"二、四个Task","slug":"二、四个task","link":"#二、四个task","children":[{"level":3,"title":"Task #1 - Copy-On-Write Trie","slug":"task-1-copy-on-write-trie","link":"#task-1-copy-on-write-trie","children":[]},{"level":3,"title":"Get( ) 思路","slug":"get-思路","link":"#get-思路","children":[]},{"level":3,"title":"Put( ) 思路","slug":"put-思路","link":"#put-思路","children":[]},{"level":3,"title":"Remove( ) 思路","slug":"remove-思路","link":"#remove-思路","children":[]},{"level":3,"title":"Remove( ) 实现","slug":"remove-实现","link":"#remove-实现","children":[]},{"level":3,"title":"Task #2 - Concurrent Key-Value Store","slug":"task-2-concurrent-key-value-store","link":"#task-2-concurrent-key-value-store","children":[]},{"level":3,"title":"思路","slug":"思路","link":"#思路","children":[]},{"level":3,"title":"实现","slug":"实现","link":"#实现","children":[]},{"level":3,"title":"Task #3 - Debugging","slug":"task-3-debugging","link":"#task-3-debugging","children":[]},{"level":3,"title":"Task #4 - SQL String Functions","slug":"task-4-sql-string-functions","link":"#task-4-sql-string-functions","children":[]}]},{"level":2,"title":"三、评测注意","slug":"三、评测注意","link":"#三、评测注意","children":[{"level":3,"title":"补充：","slug":"补充","link":"#补充","children":[]}]},{"level":2,"title":"四、总结","slug":"四、总结","link":"#四、总结","children":[]}],"git":{"createdTime":1736478285000,"updatedTime":1736478285000,"contributors":[{"name":"BUAA-TYZ","username":"BUAA-TYZ","email":"2506741037@qq.com","commits":1,"url":"https://github.com/BUAA-TYZ"}]},"readingTime":{"minutes":13.25,"words":3974},"filePathRelative":"posts/project/CMU15445/p0.md","localizedDate":"2024年7月11日","excerpt":"\\n<h2>前言</h2>\\n<p>写这篇文章，初衷是因为网上很少有CMU15445-2023的博客文章。记录下我在做的过程中走过的弯路，一方面是对自己工作的一个总结，另一方面也能帮助到在做这门课的 #project 时踩坑而无从下手的同学，何乐而不为？</p>\\n<p><strong>2023-06-25</strong> 补充 task2 内容</p>\\n<p><strong>2023-07-21</strong> 补充 task3 内容</p>\\n<p><strong>2023-08-23</strong> 补充截断的原因</p>\\n<p><strong>2023-10-27</strong> 补充环境配置</p>","autoDesc":true}');export{y as comp,b as data};
